reexport!("_ZNK8CSteamID7IsValidEv", fn CSteamID_IsValid(this : * const CSteamID) -> bool);
reexport!("_ZNK8CSteamID6RenderEv", fn CSteamID_Render(this : * const CSteamID) -> * const :: std :: os :: raw :: c_char);
reexport!("_ZN8CSteamID6RenderEy", fn CSteamID_Render1(ulSteamID : uint64) -> * const :: std :: os :: raw :: c_char);
reexport!("_ZN8CSteamID13SetFromStringEPKc9EUniverse", fn CSteamID_SetFromString(this : * mut CSteamID, pchSteamID : * const :: std :: os :: raw :: c_char, eDefaultUniverse : EUniverse));
reexport!("_ZN8CSteamID19SetFromStringStrictEPKc9EUniverse", fn CSteamID_SetFromStringStrict(this : * mut CSteamID, pchSteamID : * const :: std :: os :: raw :: c_char, eDefaultUniverse : EUniverse) -> bool);
reexport!("_ZNK8CSteamID21BValidExternalSteamIDEv", fn CSteamID_BValidExternalSteamID(this : * const CSteamID) -> bool);
reexport!("_ZN8CSteamIDC1EPKc9EUniverse", fn CSteamID_CSteamID(this : * mut CSteamID, pchSteamID : * const :: std :: os :: raw :: c_char, eDefaultUniverse : EUniverse));
reexport!("_ZNK7CGameID6RenderEv", fn CGameID_Render(this : * const CGameID) -> * const :: std :: os :: raw :: c_char);
reexport!("_ZN7CGameID6RenderEy", fn CGameID_Render1(ulGameID : uint64) -> * const :: std :: os :: raw :: c_char);
reexport!("_ZN7CGameIDC1EPKc", fn CGameID_CGameID(this : * mut CGameID, pchGameID : * const :: std :: os :: raw :: c_char));
reexport!("_ZN21SteamNetworkingIPAddr5ClearEv", fn SteamNetworkingIPAddr_Clear(this : * mut SteamNetworkingIPAddr));
reexport!("_ZNK21SteamNetworkingIPAddr14IsIPv6AllZerosEv", fn SteamNetworkingIPAddr_IsIPv6AllZeros(this : * const SteamNetworkingIPAddr) -> bool);
reexport!("_ZN21SteamNetworkingIPAddr7SetIPv6EPKht", fn SteamNetworkingIPAddr_SetIPv6(this : * mut SteamNetworkingIPAddr, ipv6 : * const uint8, nPort : uint16));
reexport!("_ZN21SteamNetworkingIPAddr7SetIPv4Ejt", fn SteamNetworkingIPAddr_SetIPv4(this : * mut SteamNetworkingIPAddr, nIP : uint32, nPort : uint16));
reexport!("_ZNK21SteamNetworkingIPAddr6IsIPv4Ev", fn SteamNetworkingIPAddr_IsIPv4(this : * const SteamNetworkingIPAddr) -> bool);
reexport!("_ZNK21SteamNetworkingIPAddr7GetIPv4Ev", fn SteamNetworkingIPAddr_GetIPv4(this : * const SteamNetworkingIPAddr) -> uint32);
reexport!("_ZN21SteamNetworkingIPAddr16SetIPv6LocalHostEt", fn SteamNetworkingIPAddr_SetIPv6LocalHost(this : * mut SteamNetworkingIPAddr, nPort : uint16));
reexport!("_ZNK21SteamNetworkingIPAddr11IsLocalHostEv", fn SteamNetworkingIPAddr_IsLocalHost(this : * const SteamNetworkingIPAddr) -> bool);
reexport!("_ZNK21SteamNetworkingIPAddr13GetFakeIPTypeEv", fn SteamNetworkingIPAddr_GetFakeIPType(this : * const SteamNetworkingIPAddr) -> ESteamNetworkingFakeIPType);
reexport!("_ZN23SteamNetworkingIdentity5ClearEv", fn SteamNetworkingIdentity_Clear(this : * mut SteamNetworkingIdentity));
reexport!("_ZNK23SteamNetworkingIdentity9IsInvalidEv", fn SteamNetworkingIdentity_IsInvalid(this : * const SteamNetworkingIdentity) -> bool);
reexport!("_ZN23SteamNetworkingIdentity10SetSteamIDE8CSteamID", fn SteamNetworkingIdentity_SetSteamID(this : * mut SteamNetworkingIdentity, steamID : CSteamID));
reexport!("_ZNK23SteamNetworkingIdentity10GetSteamIDEv", fn SteamNetworkingIdentity_GetSteamID(this : * const SteamNetworkingIdentity) -> CSteamID);
reexport!("_ZN23SteamNetworkingIdentity12SetSteamID64Ey", fn SteamNetworkingIdentity_SetSteamID64(this : * mut SteamNetworkingIdentity, steamID : uint64));
reexport!("_ZNK23SteamNetworkingIdentity12GetSteamID64Ev", fn SteamNetworkingIdentity_GetSteamID64(this : * const SteamNetworkingIdentity) -> uint64);
reexport!("_ZN23SteamNetworkingIdentity17SetXboxPairwiseIDEPKc", fn SteamNetworkingIdentity_SetXboxPairwiseID(this : * mut SteamNetworkingIdentity, pszString : * const :: std :: os :: raw :: c_char) -> bool);
reexport!("_ZNK23SteamNetworkingIdentity17GetXboxPairwiseIDEv", fn SteamNetworkingIdentity_GetXboxPairwiseID(this : * const SteamNetworkingIdentity) -> * const :: std :: os :: raw :: c_char);
reexport!("_ZN23SteamNetworkingIdentity8SetPSNIDEy", fn SteamNetworkingIdentity_SetPSNID(this : * mut SteamNetworkingIdentity, id : uint64));
reexport!("_ZNK23SteamNetworkingIdentity8GetPSNIDEv", fn SteamNetworkingIdentity_GetPSNID(this : * const SteamNetworkingIdentity) -> uint64);
reexport!("_ZN23SteamNetworkingIdentity11SetStadiaIDEy", fn SteamNetworkingIdentity_SetStadiaID(this : * mut SteamNetworkingIdentity, id : uint64));
reexport!("_ZNK23SteamNetworkingIdentity11GetStadiaIDEv", fn SteamNetworkingIdentity_GetStadiaID(this : * const SteamNetworkingIdentity) -> uint64);
reexport!("_ZN23SteamNetworkingIdentity9SetIPAddrERK21SteamNetworkingIPAddr", fn SteamNetworkingIdentity_SetIPAddr(this : * mut SteamNetworkingIdentity, addr : * const SteamNetworkingIPAddr));
reexport!("_ZNK23SteamNetworkingIdentity9GetIPAddrEv", fn SteamNetworkingIdentity_GetIPAddr(this : * const SteamNetworkingIdentity) -> * const SteamNetworkingIPAddr);
reexport!("_ZN23SteamNetworkingIdentity11SetIPv4AddrEjt", fn SteamNetworkingIdentity_SetIPv4Addr(this : * mut SteamNetworkingIdentity, nIPv4 : uint32, nPort : uint16));
reexport!("_ZNK23SteamNetworkingIdentity7GetIPv4Ev", fn SteamNetworkingIdentity_GetIPv4(this : * const SteamNetworkingIdentity) -> uint32);
reexport!("_ZNK23SteamNetworkingIdentity13GetFakeIPTypeEv", fn SteamNetworkingIdentity_GetFakeIPType(this : * const SteamNetworkingIdentity) -> ESteamNetworkingFakeIPType);
reexport!("_ZN23SteamNetworkingIdentity12SetLocalHostEv", fn SteamNetworkingIdentity_SetLocalHost(this : * mut SteamNetworkingIdentity));
reexport!("_ZNK23SteamNetworkingIdentity11IsLocalHostEv", fn SteamNetworkingIdentity_IsLocalHost(this : * const SteamNetworkingIdentity) -> bool);
reexport!("_ZN23SteamNetworkingIdentity16SetGenericStringEPKc", fn SteamNetworkingIdentity_SetGenericString(this : * mut SteamNetworkingIdentity, pszString : * const :: std :: os :: raw :: c_char) -> bool);
reexport!("_ZNK23SteamNetworkingIdentity16GetGenericStringEv", fn SteamNetworkingIdentity_GetGenericString(this : * const SteamNetworkingIdentity) -> * const :: std :: os :: raw :: c_char);
reexport!("_ZNK23SteamNetworkingIdentity15GetGenericBytesERi", fn SteamNetworkingIdentity_GetGenericBytes(this : * const SteamNetworkingIdentity, cbLen : * mut :: std :: os :: raw :: c_int) -> * const uint8);
reexport!("_ZN23SteamNetworkingIdentity11ParseStringEPKc", fn SteamNetworkingIdentity_ParseString(this : * mut SteamNetworkingIdentity, pszStr : * const :: std :: os :: raw :: c_char) -> bool);
reexport!("_ZN23ISteamNetworkingSocketsD1Ev", fn ISteamNetworkingSockets_ISteamNetworkingSockets_destructor(this : * mut ISteamNetworkingSockets));
reexport!("_ZN21ISteamNetworkingUtils25SetGlobalConfigValueInt32E27ESteamNetworkingConfigValuei", fn ISteamNetworkingUtils_SetGlobalConfigValueInt32(this : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, val : int32) -> bool);
reexport!("_ZN21ISteamNetworkingUtils25SetGlobalConfigValueFloatE27ESteamNetworkingConfigValuef", fn ISteamNetworkingUtils_SetGlobalConfigValueFloat(this : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, val : f32) -> bool);
reexport!("_ZN21ISteamNetworkingUtils26SetGlobalConfigValueStringE27ESteamNetworkingConfigValuePKc", fn ISteamNetworkingUtils_SetGlobalConfigValueString(this : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, val : * const :: std :: os :: raw :: c_char) -> bool);
reexport!("_ZN21ISteamNetworkingUtils23SetGlobalConfigValuePtrE27ESteamNetworkingConfigValuePv", fn ISteamNetworkingUtils_SetGlobalConfigValuePtr(this : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, val : * mut :: std :: os :: raw :: c_void) -> bool);
reexport!("_ZN21ISteamNetworkingUtils29SetConnectionConfigValueInt32Ej27ESteamNetworkingConfigValuei", fn ISteamNetworkingUtils_SetConnectionConfigValueInt32(this : * mut ISteamNetworkingUtils, hConn : HSteamNetConnection, eValue : ESteamNetworkingConfigValue, val : int32) -> bool);
reexport!("_ZN21ISteamNetworkingUtils29SetConnectionConfigValueFloatEj27ESteamNetworkingConfigValuef", fn ISteamNetworkingUtils_SetConnectionConfigValueFloat(this : * mut ISteamNetworkingUtils, hConn : HSteamNetConnection, eValue : ESteamNetworkingConfigValue, val : f32) -> bool);
reexport!("_ZN21ISteamNetworkingUtils30SetConnectionConfigValueStringEj27ESteamNetworkingConfigValuePKc", fn ISteamNetworkingUtils_SetConnectionConfigValueString(this : * mut ISteamNetworkingUtils, hConn : HSteamNetConnection, eValue : ESteamNetworkingConfigValue, val : * const :: std :: os :: raw :: c_char) -> bool);
reexport!("_ZN21ISteamNetworkingUtils49SetGlobalCallback_SteamNetConnectionStatusChangedEPFvP41SteamNetConnectionStatusChangedCallback_tE", fn ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(this : * mut ISteamNetworkingUtils, fnCallback : FnSteamNetConnectionStatusChanged) -> bool);
reexport!("_ZN21ISteamNetworkingUtils53SetGlobalCallback_SteamNetAuthenticationStatusChangedEPFvP30SteamNetAuthenticationStatus_tE", fn ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(this : * mut ISteamNetworkingUtils, fnCallback : FnSteamNetAuthenticationStatusChanged) -> bool);
reexport!("_ZN21ISteamNetworkingUtils48SetGlobalCallback_SteamRelayNetworkStatusChangedEPFvP25SteamRelayNetworkStatus_tE", fn ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(this : * mut ISteamNetworkingUtils, fnCallback : FnSteamRelayNetworkStatusChanged) -> bool);
reexport!("_ZN21ISteamNetworkingUtils30SetGlobalCallback_FakeIPResultEPFvP29SteamNetworkingFakeIPResult_tE", fn ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult(this : * mut ISteamNetworkingUtils, fnCallback : FnSteamNetworkingFakeIPResult) -> bool);
reexport!("_ZN21ISteamNetworkingUtils40SetGlobalCallback_MessagesSessionRequestEPFvP39SteamNetworkingMessagesSessionRequest_tE", fn ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest(this : * mut ISteamNetworkingUtils, fnCallback : FnSteamNetworkingMessagesSessionRequest) -> bool);
reexport!("_ZN21ISteamNetworkingUtils39SetGlobalCallback_MessagesSessionFailedEPFvP38SteamNetworkingMessagesSessionFailed_tE", fn ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed(this : * mut ISteamNetworkingUtils, fnCallback : FnSteamNetworkingMessagesSessionFailed) -> bool);
reexport!("_ZN21ISteamNetworkingUtilsD1Ev", fn ISteamNetworkingUtils_ISteamNetworkingUtils_destructor(this : * mut ISteamNetworkingUtils));
