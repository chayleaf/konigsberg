#[cfg(all(not(target_os = "macos"), not(target_os = "windows")))]
include!("linux_reexports.rs");
#[cfg(all(not(target_os = "macos"), not(target_os = "windows")))]
include!("linux_windows_reexports.rs");
#[cfg(target_os = "macos")]
include!("macos_reexports.rs");
#[cfg(target_os = "windows")]
include!("windows_reexports.rs");
#[cfg(target_os = "windows")]
include!("linux_windows_reexports.rs");

reexport!(fn SteamAPI_RunCallbacks());
reexport!(fn SteamGameServer_RunCallbacks());
reexport!(fn SteamAPI_GetHSteamPipe() -> HSteamPipe);
reexport!(fn SteamAPI_GetHSteamUser() -> HSteamUser);
reexport!(fn SteamGameServer_GetHSteamPipe() -> HSteamPipe);
reexport!(fn SteamGameServer_GetHSteamUser() -> HSteamUser);
reexport!(fn SteamInternal_ContextInit(pContextInitData : * mut :: std :: os :: raw :: c_void) -> * mut :: std :: os :: raw :: c_void);
reexport!(fn SteamInternal_CreateInterface(ver : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_void);
reexport!(fn SteamInternal_FindOrCreateGameServerInterface(hSteamUser : HSteamUser, pszVersion : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_void);
reexport!(fn SteamAPI_RegisterCallback(pCallback : * mut CCallbackBase, iCallback : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_UnregisterCallback(pCallback : * mut CCallbackBase));
reexport!(fn SteamAPI_RegisterCallResult(pCallback : * mut CCallbackBase, hAPICall : SteamAPICall_t));
reexport!(fn SteamAPI_UnregisterCallResult(pCallback : * mut CCallbackBase, hAPICall : SteamAPICall_t));
reexport!(fn SteamAPI_Init() -> bool);
reexport!(fn SteamAPI_Shutdown());
reexport!(fn SteamAPI_RestartAppIfNecessary(unOwnAppID : uint32) -> bool);
reexport!(fn SteamAPI_ReleaseCurrentThreadMemory());
reexport!(fn SteamAPI_WriteMiniDump(uStructuredExceptionCode : uint32, pvExceptionInfo : * mut :: std :: os :: raw :: c_void, uBuildID : uint32));
reexport!(fn SteamAPI_SetMiniDumpComment(pchMsg : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_IsSteamRunning() -> bool);
reexport!(fn SteamAPI_GetSteamInstallPath() -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_SetTryCatchCallbacks(bTryCatchCallbacks : bool));
reexport!(fn SteamAPI_ManualDispatch_Init());
reexport!(fn SteamAPI_ManualDispatch_RunFrame(hSteamPipe : HSteamPipe));
reexport!(fn SteamAPI_ManualDispatch_GetNextCallback(hSteamPipe : HSteamPipe, pCallbackMsg : * mut CallbackMsg_t) -> bool);
reexport!(fn SteamAPI_ManualDispatch_FreeLastCallback(hSteamPipe : HSteamPipe));
reexport!(fn SteamAPI_ManualDispatch_GetAPICallResult(hSteamPipe : HSteamPipe, hSteamAPICall : SteamAPICall_t, pCallback : * mut :: std :: os :: raw :: c_void, cubCallback : :: std :: os :: raw :: c_int, iCallbackExpected : :: std :: os :: raw :: c_int, pbFailed : * mut bool) -> bool);
reexport!(fn SteamAPI_ISteamClient_CreateSteamPipe(self_ : * mut ISteamClient) -> HSteamPipe);
reexport!(fn SteamAPI_ISteamClient_BReleaseSteamPipe(self_ : * mut ISteamClient, hSteamPipe : HSteamPipe) -> bool);
reexport!(fn SteamAPI_ISteamClient_ConnectToGlobalUser(self_ : * mut ISteamClient, hSteamPipe : HSteamPipe) -> HSteamUser);
reexport!(fn SteamAPI_ISteamClient_CreateLocalUser(self_ : * mut ISteamClient, phSteamPipe : * mut HSteamPipe, eAccountType : EAccountType) -> HSteamUser);
reexport!(fn SteamAPI_ISteamClient_ReleaseUser(self_ : * mut ISteamClient, hSteamPipe : HSteamPipe, hUser : HSteamUser));
reexport!(fn SteamAPI_ISteamClient_GetISteamUser(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamUser);
reexport!(fn SteamAPI_ISteamClient_GetISteamGameServer(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamGameServer);
reexport!(fn SteamAPI_ISteamClient_SetLocalIPBinding(self_ : * mut ISteamClient, unIP : * const SteamIPAddress_t, usPort : uint16));
reexport!(fn SteamAPI_ISteamClient_GetISteamFriends(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamFriends);
reexport!(fn SteamAPI_ISteamClient_GetISteamUtils(self_ : * mut ISteamClient, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamUtils);
reexport!(fn SteamAPI_ISteamClient_GetISteamMatchmaking(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamMatchmaking);
reexport!(fn SteamAPI_ISteamClient_GetISteamMatchmakingServers(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamMatchmakingServers);
reexport!(fn SteamAPI_ISteamClient_GetISteamGenericInterface(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_void);
reexport!(fn SteamAPI_ISteamClient_GetISteamUserStats(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamUserStats);
reexport!(fn SteamAPI_ISteamClient_GetISteamGameServerStats(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamGameServerStats);
reexport!(fn SteamAPI_ISteamClient_GetISteamApps(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamApps);
reexport!(fn SteamAPI_ISteamClient_GetISteamNetworking(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamNetworking);
reexport!(fn SteamAPI_ISteamClient_GetISteamRemoteStorage(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamRemoteStorage);
reexport!(fn SteamAPI_ISteamClient_GetISteamScreenshots(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamScreenshots);
reexport!(fn SteamAPI_ISteamClient_GetISteamGameSearch(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamGameSearch);
reexport!(fn SteamAPI_ISteamClient_GetIPCCallCount(self_ : * mut ISteamClient) -> uint32);
reexport!(fn SteamAPI_ISteamClient_SetWarningMessageHook(self_ : * mut ISteamClient, pFunction : SteamAPIWarningMessageHook_t));
reexport!(fn SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(self_ : * mut ISteamClient) -> bool);
reexport!(fn SteamAPI_ISteamClient_GetISteamHTTP(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamHTTP);
reexport!(fn SteamAPI_ISteamClient_GetISteamController(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamController);
reexport!(fn SteamAPI_ISteamClient_GetISteamUGC(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamUGC);
reexport!(fn SteamAPI_ISteamClient_GetISteamAppList(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamAppList);
reexport!(fn SteamAPI_ISteamClient_GetISteamMusic(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamMusic);
reexport!(fn SteamAPI_ISteamClient_GetISteamMusicRemote(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamMusicRemote);
reexport!(fn SteamAPI_ISteamClient_GetISteamHTMLSurface(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamHTMLSurface);
reexport!(fn SteamAPI_ISteamClient_GetISteamInventory(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamInventory);
reexport!(fn SteamAPI_ISteamClient_GetISteamVideo(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamVideo);
reexport!(fn SteamAPI_ISteamClient_GetISteamParentalSettings(self_ : * mut ISteamClient, hSteamuser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamParentalSettings);
reexport!(fn SteamAPI_ISteamClient_GetISteamInput(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamInput);
reexport!(fn SteamAPI_ISteamClient_GetISteamParties(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamParties);
reexport!(fn SteamAPI_ISteamClient_GetISteamRemotePlay(self_ : * mut ISteamClient, hSteamUser : HSteamUser, hSteamPipe : HSteamPipe, pchVersion : * const :: std :: os :: raw :: c_char) -> * mut ISteamRemotePlay);
reexport!(fn SteamAPI_SteamUser_v021() -> * mut ISteamUser);
reexport!(fn SteamAPI_ISteamUser_GetHSteamUser(self_ : * mut ISteamUser) -> HSteamUser);
reexport!(fn SteamAPI_ISteamUser_BLoggedOn(self_ : * mut ISteamUser) -> bool);
reexport!(fn SteamAPI_ISteamUser_GetSteamID(self_ : * mut ISteamUser) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED(self_ : * mut ISteamUser, pAuthBlob : * mut :: std :: os :: raw :: c_void, cbMaxAuthBlob : :: std :: os :: raw :: c_int, steamIDGameServer : uint64_steamid, unIPServer : uint32, usPortServer : uint16, bSecure : bool) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED(self_ : * mut ISteamUser, unIPServer : uint32, usPortServer : uint16));
reexport!(fn SteamAPI_ISteamUser_TrackAppUsageEvent(self_ : * mut ISteamUser, gameID : uint64_gameid, eAppUsageEvent : :: std :: os :: raw :: c_int, pchExtraInfo : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamUser_GetUserDataFolder(self_ : * mut ISteamUser, pchBuffer : * mut :: std :: os :: raw :: c_char, cubBuffer : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamUser_StartVoiceRecording(self_ : * mut ISteamUser));
reexport!(fn SteamAPI_ISteamUser_StopVoiceRecording(self_ : * mut ISteamUser));
reexport!(fn SteamAPI_ISteamUser_GetAvailableVoice(self_ : * mut ISteamUser, pcbCompressed : * mut uint32, pcbUncompressed_Deprecated : * mut uint32, nUncompressedVoiceDesiredSampleRate_Deprecated : uint32) -> EVoiceResult);
reexport!(fn SteamAPI_ISteamUser_GetVoice(self_ : * mut ISteamUser, bWantCompressed : bool, pDestBuffer : * mut :: std :: os :: raw :: c_void, cbDestBufferSize : uint32, nBytesWritten : * mut uint32, bWantUncompressed_Deprecated : bool, pUncompressedDestBuffer_Deprecated : * mut :: std :: os :: raw :: c_void, cbUncompressedDestBufferSize_Deprecated : uint32, nUncompressBytesWritten_Deprecated : * mut uint32, nUncompressedVoiceDesiredSampleRate_Deprecated : uint32) -> EVoiceResult);
reexport!(fn SteamAPI_ISteamUser_DecompressVoice(self_ : * mut ISteamUser, pCompressed : * const :: std :: os :: raw :: c_void, cbCompressed : uint32, pDestBuffer : * mut :: std :: os :: raw :: c_void, cbDestBufferSize : uint32, nBytesWritten : * mut uint32, nDesiredSampleRate : uint32) -> EVoiceResult);
reexport!(fn SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(self_ : * mut ISteamUser) -> uint32);
reexport!(fn SteamAPI_ISteamUser_GetAuthSessionTicket(self_ : * mut ISteamUser, pTicket : * mut :: std :: os :: raw :: c_void, cbMaxTicket : :: std :: os :: raw :: c_int, pcbTicket : * mut uint32) -> HAuthTicket);
reexport!(fn SteamAPI_ISteamUser_BeginAuthSession(self_ : * mut ISteamUser, pAuthTicket : * const :: std :: os :: raw :: c_void, cbAuthTicket : :: std :: os :: raw :: c_int, steamID : uint64_steamid) -> EBeginAuthSessionResult);
reexport!(fn SteamAPI_ISteamUser_EndAuthSession(self_ : * mut ISteamUser, steamID : uint64_steamid));
reexport!(fn SteamAPI_ISteamUser_CancelAuthTicket(self_ : * mut ISteamUser, hAuthTicket : HAuthTicket));
reexport!(fn SteamAPI_ISteamUser_UserHasLicenseForApp(self_ : * mut ISteamUser, steamID : uint64_steamid, appID : AppId_t) -> EUserHasLicenseForAppResult);
reexport!(fn SteamAPI_ISteamUser_BIsBehindNAT(self_ : * mut ISteamUser) -> bool);
reexport!(fn SteamAPI_ISteamUser_AdvertiseGame(self_ : * mut ISteamUser, steamIDGameServer : uint64_steamid, unIPServer : uint32, usPortServer : uint16));
reexport!(fn SteamAPI_ISteamUser_RequestEncryptedAppTicket(self_ : * mut ISteamUser, pDataToInclude : * mut :: std :: os :: raw :: c_void, cbDataToInclude : :: std :: os :: raw :: c_int) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUser_GetEncryptedAppTicket(self_ : * mut ISteamUser, pTicket : * mut :: std :: os :: raw :: c_void, cbMaxTicket : :: std :: os :: raw :: c_int, pcbTicket : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamUser_GetGameBadgeLevel(self_ : * mut ISteamUser, nSeries : :: std :: os :: raw :: c_int, bFoil : bool) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamUser_GetPlayerSteamLevel(self_ : * mut ISteamUser) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamUser_RequestStoreAuthURL(self_ : * mut ISteamUser, pchRedirectURL : * const :: std :: os :: raw :: c_char) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUser_BIsPhoneVerified(self_ : * mut ISteamUser) -> bool);
reexport!(fn SteamAPI_ISteamUser_BIsTwoFactorEnabled(self_ : * mut ISteamUser) -> bool);
reexport!(fn SteamAPI_ISteamUser_BIsPhoneIdentifying(self_ : * mut ISteamUser) -> bool);
reexport!(fn SteamAPI_ISteamUser_BIsPhoneRequiringVerification(self_ : * mut ISteamUser) -> bool);
reexport!(fn SteamAPI_ISteamUser_GetMarketEligibility(self_ : * mut ISteamUser) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUser_GetDurationControl(self_ : * mut ISteamUser) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUser_BSetDurationControlOnlineState(self_ : * mut ISteamUser, eNewState : EDurationControlOnlineState) -> bool);
reexport!(fn SteamAPI_SteamFriends_v017() -> * mut ISteamFriends);
reexport!(fn SteamAPI_ISteamFriends_GetPersonaName(self_ : * mut ISteamFriends) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamFriends_SetPersonaName(self_ : * mut ISteamFriends, pchPersonaName : * const :: std :: os :: raw :: c_char) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamFriends_GetPersonaState(self_ : * mut ISteamFriends) -> EPersonaState);
reexport!(fn SteamAPI_ISteamFriends_GetFriendCount(self_ : * mut ISteamFriends, iFriendFlags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetFriendByIndex(self_ : * mut ISteamFriends, iFriend : :: std :: os :: raw :: c_int, iFriendFlags : :: std :: os :: raw :: c_int) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamFriends_GetFriendRelationship(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid) -> EFriendRelationship);
reexport!(fn SteamAPI_ISteamFriends_GetFriendPersonaState(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid) -> EPersonaState);
reexport!(fn SteamAPI_ISteamFriends_GetFriendPersonaName(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamFriends_GetFriendGamePlayed(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid, pFriendGameInfo : * mut FriendGameInfo_t) -> bool);
reexport!(fn SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid, iPersonaName : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamFriends_GetFriendSteamLevel(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetPlayerNickname(self_ : * mut ISteamFriends, steamIDPlayer : uint64_steamid) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamFriends_GetFriendsGroupCount(self_ : * mut ISteamFriends) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(self_ : * mut ISteamFriends, iFG : :: std :: os :: raw :: c_int) -> FriendsGroupID_t);
reexport!(fn SteamAPI_ISteamFriends_GetFriendsGroupName(self_ : * mut ISteamFriends, friendsGroupID : FriendsGroupID_t) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(self_ : * mut ISteamFriends, friendsGroupID : FriendsGroupID_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetFriendsGroupMembersList(self_ : * mut ISteamFriends, friendsGroupID : FriendsGroupID_t, pOutSteamIDMembers : * mut CSteamID, nMembersCount : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamFriends_HasFriend(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid, iFriendFlags : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamFriends_GetClanCount(self_ : * mut ISteamFriends) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetClanByIndex(self_ : * mut ISteamFriends, iClan : :: std :: os :: raw :: c_int) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamFriends_GetClanName(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamFriends_GetClanTag(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamFriends_GetClanActivityCounts(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid, pnOnline : * mut :: std :: os :: raw :: c_int, pnInGame : * mut :: std :: os :: raw :: c_int, pnChatting : * mut :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamFriends_DownloadClanActivityCounts(self_ : * mut ISteamFriends, psteamIDClans : * mut CSteamID, cClansToRequest : :: std :: os :: raw :: c_int) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamFriends_GetFriendCountFromSource(self_ : * mut ISteamFriends, steamIDSource : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(self_ : * mut ISteamFriends, steamIDSource : uint64_steamid, iFriend : :: std :: os :: raw :: c_int) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamFriends_IsUserInSource(self_ : * mut ISteamFriends, steamIDUser : uint64_steamid, steamIDSource : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(self_ : * mut ISteamFriends, steamIDUser : uint64_steamid, bSpeaking : bool));
reexport!(fn SteamAPI_ISteamFriends_ActivateGameOverlay(self_ : * mut ISteamFriends, pchDialog : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamFriends_ActivateGameOverlayToUser(self_ : * mut ISteamFriends, pchDialog : * const :: std :: os :: raw :: c_char, steamID : uint64_steamid));
reexport!(fn SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(self_ : * mut ISteamFriends, pchURL : * const :: std :: os :: raw :: c_char, eMode : EActivateGameOverlayToWebPageMode));
reexport!(fn SteamAPI_ISteamFriends_ActivateGameOverlayToStore(self_ : * mut ISteamFriends, nAppID : AppId_t, eFlag : EOverlayToStoreFlag));
reexport!(fn SteamAPI_ISteamFriends_SetPlayedWith(self_ : * mut ISteamFriends, steamIDUserPlayedWith : uint64_steamid));
reexport!(fn SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(self_ : * mut ISteamFriends, steamIDLobby : uint64_steamid));
reexport!(fn SteamAPI_ISteamFriends_GetSmallFriendAvatar(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetMediumFriendAvatar(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetLargeFriendAvatar(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_RequestUserInformation(self_ : * mut ISteamFriends, steamIDUser : uint64_steamid, bRequireNameOnly : bool) -> bool);
reexport!(fn SteamAPI_ISteamFriends_RequestClanOfficerList(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamFriends_GetClanOwner(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamFriends_GetClanOfficerCount(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetClanOfficerByIndex(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid, iOfficer : :: std :: os :: raw :: c_int) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamFriends_GetUserRestrictions(self_ : * mut ISteamFriends) -> uint32);
reexport!(fn SteamAPI_ISteamFriends_SetRichPresence(self_ : * mut ISteamFriends, pchKey : * const :: std :: os :: raw :: c_char, pchValue : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamFriends_ClearRichPresence(self_ : * mut ISteamFriends));
reexport!(fn SteamAPI_ISteamFriends_GetFriendRichPresence(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid, pchKey : * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid, iKey : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamFriends_RequestFriendRichPresence(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid));
reexport!(fn SteamAPI_ISteamFriends_InviteUserToGame(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid, pchConnectString : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamFriends_GetCoplayFriendCount(self_ : * mut ISteamFriends) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetCoplayFriend(self_ : * mut ISteamFriends, iCoplayFriend : :: std :: os :: raw :: c_int) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamFriends_GetFriendCoplayTime(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetFriendCoplayGame(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid) -> AppId_t);
reexport!(fn SteamAPI_ISteamFriends_JoinClanChatRoom(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamFriends_LeaveClanChatRoom(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamFriends_GetClanChatMemberCount(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetChatMemberByIndex(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid, iUser : :: std :: os :: raw :: c_int) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamFriends_SendClanChatMessage(self_ : * mut ISteamFriends, steamIDClanChat : uint64_steamid, pchText : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamFriends_GetClanChatMessage(self_ : * mut ISteamFriends, steamIDClanChat : uint64_steamid, iMessage : :: std :: os :: raw :: c_int, prgchText : * mut :: std :: os :: raw :: c_void, cchTextMax : :: std :: os :: raw :: c_int, peChatEntryType : * mut EChatEntryType, psteamidChatter : * mut CSteamID) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_IsClanChatAdmin(self_ : * mut ISteamFriends, steamIDClanChat : uint64_steamid, steamIDUser : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(self_ : * mut ISteamFriends, steamIDClanChat : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(self_ : * mut ISteamFriends, steamIDClanChat : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(self_ : * mut ISteamFriends, steamIDClanChat : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamFriends_SetListenForFriendsMessages(self_ : * mut ISteamFriends, bInterceptEnabled : bool) -> bool);
reexport!(fn SteamAPI_ISteamFriends_ReplyToFriendMessage(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid, pchMsgToSend : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamFriends_GetFriendMessage(self_ : * mut ISteamFriends, steamIDFriend : uint64_steamid, iMessageID : :: std :: os :: raw :: c_int, pvData : * mut :: std :: os :: raw :: c_void, cubData : :: std :: os :: raw :: c_int, peChatEntryType : * mut EChatEntryType) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_GetFollowerCount(self_ : * mut ISteamFriends, steamID : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamFriends_IsFollowing(self_ : * mut ISteamFriends, steamID : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamFriends_EnumerateFollowingList(self_ : * mut ISteamFriends, unStartIndex : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamFriends_IsClanPublic(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamFriends_IsClanOfficialGameGroup(self_ : * mut ISteamFriends, steamIDClan : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages(self_ : * mut ISteamFriends) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(self_ : * mut ISteamFriends, steamIDLobby : uint64_steamid));
reexport!(fn SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser(self_ : * mut ISteamFriends, pchProtocol : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString(self_ : * mut ISteamFriends, pchConnectString : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamFriends_RequestEquippedProfileItems(self_ : * mut ISteamFriends, steamID : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamFriends_BHasEquippedProfileItem(self_ : * mut ISteamFriends, steamID : uint64_steamid, itemType : ECommunityProfileItemType) -> bool);
reexport!(fn SteamAPI_ISteamFriends_GetProfileItemPropertyString(self_ : * mut ISteamFriends, steamID : uint64_steamid, itemType : ECommunityProfileItemType, prop : ECommunityProfileItemProperty) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamFriends_GetProfileItemPropertyUint(self_ : * mut ISteamFriends, steamID : uint64_steamid, itemType : ECommunityProfileItemType, prop : ECommunityProfileItemProperty) -> uint32);
reexport!(fn SteamAPI_SteamUtils_v010() -> * mut ISteamUtils);
reexport!(fn SteamAPI_SteamGameServerUtils_v010() -> * mut ISteamUtils);
reexport!(fn SteamAPI_ISteamUtils_GetSecondsSinceAppActive(self_ : * mut ISteamUtils) -> uint32);
reexport!(fn SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(self_ : * mut ISteamUtils) -> uint32);
reexport!(fn SteamAPI_ISteamUtils_GetConnectedUniverse(self_ : * mut ISteamUtils) -> EUniverse);
reexport!(fn SteamAPI_ISteamUtils_GetServerRealTime(self_ : * mut ISteamUtils) -> uint32);
reexport!(fn SteamAPI_ISteamUtils_GetIPCountry(self_ : * mut ISteamUtils) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamUtils_GetImageSize(self_ : * mut ISteamUtils, iImage : :: std :: os :: raw :: c_int, pnWidth : * mut uint32, pnHeight : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamUtils_GetImageRGBA(self_ : * mut ISteamUtils, iImage : :: std :: os :: raw :: c_int, pubDest : * mut uint8, nDestBufferSize : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamUtils_GetCurrentBatteryPower(self_ : * mut ISteamUtils) -> uint8);
reexport!(fn SteamAPI_ISteamUtils_GetAppID(self_ : * mut ISteamUtils) -> uint32);
reexport!(fn SteamAPI_ISteamUtils_SetOverlayNotificationPosition(self_ : * mut ISteamUtils, eNotificationPosition : ENotificationPosition));
reexport!(fn SteamAPI_ISteamUtils_IsAPICallCompleted(self_ : * mut ISteamUtils, hSteamAPICall : SteamAPICall_t, pbFailed : * mut bool) -> bool);
reexport!(fn SteamAPI_ISteamUtils_GetAPICallFailureReason(self_ : * mut ISteamUtils, hSteamAPICall : SteamAPICall_t) -> ESteamAPICallFailure);
reexport!(fn SteamAPI_ISteamUtils_GetAPICallResult(self_ : * mut ISteamUtils, hSteamAPICall : SteamAPICall_t, pCallback : * mut :: std :: os :: raw :: c_void, cubCallback : :: std :: os :: raw :: c_int, iCallbackExpected : :: std :: os :: raw :: c_int, pbFailed : * mut bool) -> bool);
reexport!(fn SteamAPI_ISteamUtils_GetIPCCallCount(self_ : * mut ISteamUtils) -> uint32);
reexport!(fn SteamAPI_ISteamUtils_SetWarningMessageHook(self_ : * mut ISteamUtils, pFunction : SteamAPIWarningMessageHook_t));
reexport!(fn SteamAPI_ISteamUtils_IsOverlayEnabled(self_ : * mut ISteamUtils) -> bool);
reexport!(fn SteamAPI_ISteamUtils_BOverlayNeedsPresent(self_ : * mut ISteamUtils) -> bool);
reexport!(fn SteamAPI_ISteamUtils_CheckFileSignature(self_ : * mut ISteamUtils, szFileName : * const :: std :: os :: raw :: c_char) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUtils_ShowGamepadTextInput(self_ : * mut ISteamUtils, eInputMode : EGamepadTextInputMode, eLineInputMode : EGamepadTextInputLineMode, pchDescription : * const :: std :: os :: raw :: c_char, unCharMax : uint32, pchExistingText : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(self_ : * mut ISteamUtils) -> uint32);
reexport!(fn SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(self_ : * mut ISteamUtils, pchText : * mut :: std :: os :: raw :: c_char, cchText : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUtils_GetSteamUILanguage(self_ : * mut ISteamUtils) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamUtils_IsSteamRunningInVR(self_ : * mut ISteamUtils) -> bool);
reexport!(fn SteamAPI_ISteamUtils_SetOverlayNotificationInset(self_ : * mut ISteamUtils, nHorizontalInset : :: std :: os :: raw :: c_int, nVerticalInset : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamUtils_IsSteamInBigPictureMode(self_ : * mut ISteamUtils) -> bool);
reexport!(fn SteamAPI_ISteamUtils_StartVRDashboard(self_ : * mut ISteamUtils));
reexport!(fn SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(self_ : * mut ISteamUtils) -> bool);
reexport!(fn SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(self_ : * mut ISteamUtils, bEnabled : bool));
reexport!(fn SteamAPI_ISteamUtils_IsSteamChinaLauncher(self_ : * mut ISteamUtils) -> bool);
reexport!(fn SteamAPI_ISteamUtils_InitFilterText(self_ : * mut ISteamUtils, unFilterOptions : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUtils_FilterText(self_ : * mut ISteamUtils, eContext : ETextFilteringContext, sourceSteamID : uint64_steamid, pchInputMessage : * const :: std :: os :: raw :: c_char, pchOutFilteredText : * mut :: std :: os :: raw :: c_char, nByteSizeOutFilteredText : uint32) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamUtils_GetIPv6ConnectivityState(self_ : * mut ISteamUtils, eProtocol : ESteamIPv6ConnectivityProtocol) -> ESteamIPv6ConnectivityState);
reexport!(fn SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck(self_ : * mut ISteamUtils) -> bool);
reexport!(fn SteamAPI_ISteamUtils_ShowFloatingGamepadTextInput(self_ : * mut ISteamUtils, eKeyboardMode : EFloatingGamepadTextInputMode, nTextFieldXPosition : :: std :: os :: raw :: c_int, nTextFieldYPosition : :: std :: os :: raw :: c_int, nTextFieldWidth : :: std :: os :: raw :: c_int, nTextFieldHeight : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamUtils_SetGameLauncherMode(self_ : * mut ISteamUtils, bLauncherMode : bool));
reexport!(fn SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput(self_ : * mut ISteamUtils) -> bool);
reexport!(fn SteamAPI_SteamMatchmaking_v009() -> * mut ISteamMatchmaking);
reexport!(fn SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(self_ : * mut ISteamMatchmaking) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamMatchmaking_GetFavoriteGame(self_ : * mut ISteamMatchmaking, iGame : :: std :: os :: raw :: c_int, pnAppID : * mut AppId_t, pnIP : * mut uint32, pnConnPort : * mut uint16, pnQueryPort : * mut uint16, punFlags : * mut uint32, pRTime32LastPlayedOnServer : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_AddFavoriteGame(self_ : * mut ISteamMatchmaking, nAppID : AppId_t, nIP : uint32, nConnPort : uint16, nQueryPort : uint16, unFlags : uint32, rTime32LastPlayedOnServer : uint32) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(self_ : * mut ISteamMatchmaking, nAppID : AppId_t, nIP : uint32, nConnPort : uint16, nQueryPort : uint16, unFlags : uint32) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_RequestLobbyList(self_ : * mut ISteamMatchmaking) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(self_ : * mut ISteamMatchmaking, pchKeyToMatch : * const :: std :: os :: raw :: c_char, pchValueToMatch : * const :: std :: os :: raw :: c_char, eComparisonType : ELobbyComparison));
reexport!(fn SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(self_ : * mut ISteamMatchmaking, pchKeyToMatch : * const :: std :: os :: raw :: c_char, nValueToMatch : :: std :: os :: raw :: c_int, eComparisonType : ELobbyComparison));
reexport!(fn SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(self_ : * mut ISteamMatchmaking, pchKeyToMatch : * const :: std :: os :: raw :: c_char, nValueToBeCloseTo : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(self_ : * mut ISteamMatchmaking, nSlotsAvailable : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(self_ : * mut ISteamMatchmaking, eLobbyDistanceFilter : ELobbyDistanceFilter));
reexport!(fn SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(self_ : * mut ISteamMatchmaking, cMaxResults : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid));
reexport!(fn SteamAPI_ISteamMatchmaking_GetLobbyByIndex(self_ : * mut ISteamMatchmaking, iLobby : :: std :: os :: raw :: c_int) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamMatchmaking_CreateLobby(self_ : * mut ISteamMatchmaking, eLobbyType : ELobbyType, cMaxMembers : :: std :: os :: raw :: c_int) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamMatchmaking_JoinLobby(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamMatchmaking_LeaveLobby(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid));
reexport!(fn SteamAPI_ISteamMatchmaking_InviteUserToLobby(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, steamIDInvitee : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, iMember : :: std :: os :: raw :: c_int) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamMatchmaking_GetLobbyData(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, pchKey : * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamMatchmaking_SetLobbyData(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, pchKey : * const :: std :: os :: raw :: c_char, pchValue : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_GetLobbyDataCount(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, iLobbyData : :: std :: os :: raw :: c_int, pchKey : * mut :: std :: os :: raw :: c_char, cchKeyBufferSize : :: std :: os :: raw :: c_int, pchValue : * mut :: std :: os :: raw :: c_char, cchValueBufferSize : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_DeleteLobbyData(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, pchKey : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_GetLobbyMemberData(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, steamIDUser : uint64_steamid, pchKey : * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamMatchmaking_SetLobbyMemberData(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, pchKey : * const :: std :: os :: raw :: c_char, pchValue : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, pvMsgBody : * const :: std :: os :: raw :: c_void, cubMsgBody : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, iChatID : :: std :: os :: raw :: c_int, pSteamIDUser : * mut CSteamID, pvData : * mut :: std :: os :: raw :: c_void, cubData : :: std :: os :: raw :: c_int, peChatEntryType : * mut EChatEntryType) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamMatchmaking_RequestLobbyData(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_SetLobbyGameServer(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, unGameServerIP : uint32, unGameServerPort : uint16, steamIDGameServer : uint64_steamid));
reexport!(fn SteamAPI_ISteamMatchmaking_GetLobbyGameServer(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, punGameServerIP : * mut uint32, punGameServerPort : * mut uint16, psteamIDGameServer : * mut CSteamID) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, cMaxMembers : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamMatchmaking_SetLobbyType(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, eLobbyType : ELobbyType) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_SetLobbyJoinable(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, bLobbyJoinable : bool) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_GetLobbyOwner(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamMatchmaking_SetLobbyOwner(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, steamIDNewOwner : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamMatchmaking_SetLinkedLobby(self_ : * mut ISteamMatchmaking, steamIDLobby : uint64_steamid, steamIDLobbyDependent : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(self_ : * mut ISteamMatchmakingServerListResponse, hRequest : HServerListRequest, iServer : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(self_ : * mut ISteamMatchmakingServerListResponse, hRequest : HServerListRequest, iServer : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete(self_ : * mut ISteamMatchmakingServerListResponse, hRequest : HServerListRequest, response : EMatchMakingServerResponse));
reexport!(fn SteamAPI_ISteamMatchmakingPingResponse_ServerResponded(self_ : * mut ISteamMatchmakingPingResponse, server : * mut gameserveritem_t));
reexport!(fn SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond(self_ : * mut ISteamMatchmakingPingResponse));
reexport!(fn SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(self_ : * mut ISteamMatchmakingPlayersResponse, pchName : * const :: std :: os :: raw :: c_char, nScore : :: std :: os :: raw :: c_int, flTimePlayed : f32));
reexport!(fn SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond(self_ : * mut ISteamMatchmakingPlayersResponse));
reexport!(fn SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete(self_ : * mut ISteamMatchmakingPlayersResponse));
reexport!(fn SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(self_ : * mut ISteamMatchmakingRulesResponse, pchRule : * const :: std :: os :: raw :: c_char, pchValue : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond(self_ : * mut ISteamMatchmakingRulesResponse));
reexport!(fn SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete(self_ : * mut ISteamMatchmakingRulesResponse));
reexport!(fn SteamAPI_SteamMatchmakingServers_v002() -> * mut ISteamMatchmakingServers);
reexport!(fn SteamAPI_ISteamMatchmakingServers_RequestInternetServerList(self_ : * mut ISteamMatchmakingServers, iApp : AppId_t, ppchFilters : * mut * mut MatchMakingKeyValuePair_t, nFilters : uint32, pRequestServersResponse : * mut ISteamMatchmakingServerListResponse) -> HServerListRequest);
reexport!(fn SteamAPI_ISteamMatchmakingServers_RequestLANServerList(self_ : * mut ISteamMatchmakingServers, iApp : AppId_t, pRequestServersResponse : * mut ISteamMatchmakingServerListResponse) -> HServerListRequest);
reexport!(fn SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList(self_ : * mut ISteamMatchmakingServers, iApp : AppId_t, ppchFilters : * mut * mut MatchMakingKeyValuePair_t, nFilters : uint32, pRequestServersResponse : * mut ISteamMatchmakingServerListResponse) -> HServerListRequest);
reexport!(fn SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList(self_ : * mut ISteamMatchmakingServers, iApp : AppId_t, ppchFilters : * mut * mut MatchMakingKeyValuePair_t, nFilters : uint32, pRequestServersResponse : * mut ISteamMatchmakingServerListResponse) -> HServerListRequest);
reexport!(fn SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList(self_ : * mut ISteamMatchmakingServers, iApp : AppId_t, ppchFilters : * mut * mut MatchMakingKeyValuePair_t, nFilters : uint32, pRequestServersResponse : * mut ISteamMatchmakingServerListResponse) -> HServerListRequest);
reexport!(fn SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList(self_ : * mut ISteamMatchmakingServers, iApp : AppId_t, ppchFilters : * mut * mut MatchMakingKeyValuePair_t, nFilters : uint32, pRequestServersResponse : * mut ISteamMatchmakingServerListResponse) -> HServerListRequest);
reexport!(fn SteamAPI_ISteamMatchmakingServers_ReleaseRequest(self_ : * mut ISteamMatchmakingServers, hServerListRequest : HServerListRequest));
reexport!(fn SteamAPI_ISteamMatchmakingServers_GetServerDetails(self_ : * mut ISteamMatchmakingServers, hRequest : HServerListRequest, iServer : :: std :: os :: raw :: c_int) -> * mut gameserveritem_t);
reexport!(fn SteamAPI_ISteamMatchmakingServers_CancelQuery(self_ : * mut ISteamMatchmakingServers, hRequest : HServerListRequest));
reexport!(fn SteamAPI_ISteamMatchmakingServers_RefreshQuery(self_ : * mut ISteamMatchmakingServers, hRequest : HServerListRequest));
reexport!(fn SteamAPI_ISteamMatchmakingServers_IsRefreshing(self_ : * mut ISteamMatchmakingServers, hRequest : HServerListRequest) -> bool);
reexport!(fn SteamAPI_ISteamMatchmakingServers_GetServerCount(self_ : * mut ISteamMatchmakingServers, hRequest : HServerListRequest) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamMatchmakingServers_RefreshServer(self_ : * mut ISteamMatchmakingServers, hRequest : HServerListRequest, iServer : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamMatchmakingServers_PingServer(self_ : * mut ISteamMatchmakingServers, unIP : uint32, usPort : uint16, pRequestServersResponse : * mut ISteamMatchmakingPingResponse) -> HServerQuery);
reexport!(fn SteamAPI_ISteamMatchmakingServers_PlayerDetails(self_ : * mut ISteamMatchmakingServers, unIP : uint32, usPort : uint16, pRequestServersResponse : * mut ISteamMatchmakingPlayersResponse) -> HServerQuery);
reexport!(fn SteamAPI_ISteamMatchmakingServers_ServerRules(self_ : * mut ISteamMatchmakingServers, unIP : uint32, usPort : uint16, pRequestServersResponse : * mut ISteamMatchmakingRulesResponse) -> HServerQuery);
reexport!(fn SteamAPI_ISteamMatchmakingServers_CancelServerQuery(self_ : * mut ISteamMatchmakingServers, hServerQuery : HServerQuery));
reexport!(fn SteamAPI_SteamGameSearch_v001() -> * mut ISteamGameSearch);
reexport!(fn SteamAPI_ISteamGameSearch_AddGameSearchParams(self_ : * mut ISteamGameSearch, pchKeyToFind : * const :: std :: os :: raw :: c_char, pchValuesToFind : * const :: std :: os :: raw :: c_char) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_SearchForGameWithLobby(self_ : * mut ISteamGameSearch, steamIDLobby : uint64_steamid, nPlayerMin : :: std :: os :: raw :: c_int, nPlayerMax : :: std :: os :: raw :: c_int) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_SearchForGameSolo(self_ : * mut ISteamGameSearch, nPlayerMin : :: std :: os :: raw :: c_int, nPlayerMax : :: std :: os :: raw :: c_int) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_AcceptGame(self_ : * mut ISteamGameSearch) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_DeclineGame(self_ : * mut ISteamGameSearch) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_RetrieveConnectionDetails(self_ : * mut ISteamGameSearch, steamIDHost : uint64_steamid, pchConnectionDetails : * mut :: std :: os :: raw :: c_char, cubConnectionDetails : :: std :: os :: raw :: c_int) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_EndGameSearch(self_ : * mut ISteamGameSearch) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_SetGameHostParams(self_ : * mut ISteamGameSearch, pchKey : * const :: std :: os :: raw :: c_char, pchValue : * const :: std :: os :: raw :: c_char) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_SetConnectionDetails(self_ : * mut ISteamGameSearch, pchConnectionDetails : * const :: std :: os :: raw :: c_char, cubConnectionDetails : :: std :: os :: raw :: c_int) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_RequestPlayersForGame(self_ : * mut ISteamGameSearch, nPlayerMin : :: std :: os :: raw :: c_int, nPlayerMax : :: std :: os :: raw :: c_int, nMaxTeamSize : :: std :: os :: raw :: c_int) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_HostConfirmGameStart(self_ : * mut ISteamGameSearch, ullUniqueGameID : uint64) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame(self_ : * mut ISteamGameSearch) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_SubmitPlayerResult(self_ : * mut ISteamGameSearch, ullUniqueGameID : uint64, steamIDPlayer : uint64_steamid, EPlayerResult : EPlayerResult_t) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_ISteamGameSearch_EndGame(self_ : * mut ISteamGameSearch, ullUniqueGameID : uint64) -> EGameSearchErrorCode_t);
reexport!(fn SteamAPI_SteamParties_v002() -> * mut ISteamParties);
reexport!(fn SteamAPI_ISteamParties_GetNumActiveBeacons(self_ : * mut ISteamParties) -> uint32);
reexport!(fn SteamAPI_ISteamParties_GetBeaconByIndex(self_ : * mut ISteamParties, unIndex : uint32) -> PartyBeaconID_t);
reexport!(fn SteamAPI_ISteamParties_GetBeaconDetails(self_ : * mut ISteamParties, ulBeaconID : PartyBeaconID_t, pSteamIDBeaconOwner : * mut CSteamID, pLocation : * mut SteamPartyBeaconLocation_t, pchMetadata : * mut :: std :: os :: raw :: c_char, cchMetadata : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamParties_JoinParty(self_ : * mut ISteamParties, ulBeaconID : PartyBeaconID_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamParties_GetNumAvailableBeaconLocations(self_ : * mut ISteamParties, puNumLocations : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamParties_GetAvailableBeaconLocations(self_ : * mut ISteamParties, pLocationList : * mut SteamPartyBeaconLocation_t, uMaxNumLocations : uint32) -> bool);
reexport!(fn SteamAPI_ISteamParties_CreateBeacon(self_ : * mut ISteamParties, unOpenSlots : uint32, pBeaconLocation : * mut SteamPartyBeaconLocation_t, pchConnectString : * const :: std :: os :: raw :: c_char, pchMetadata : * const :: std :: os :: raw :: c_char) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamParties_OnReservationCompleted(self_ : * mut ISteamParties, ulBeacon : PartyBeaconID_t, steamIDUser : uint64_steamid));
reexport!(fn SteamAPI_ISteamParties_CancelReservation(self_ : * mut ISteamParties, ulBeacon : PartyBeaconID_t, steamIDUser : uint64_steamid));
reexport!(fn SteamAPI_ISteamParties_ChangeNumOpenSlots(self_ : * mut ISteamParties, ulBeacon : PartyBeaconID_t, unOpenSlots : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamParties_DestroyBeacon(self_ : * mut ISteamParties, ulBeacon : PartyBeaconID_t) -> bool);
reexport!(fn SteamAPI_ISteamParties_GetBeaconLocationData(self_ : * mut ISteamParties, BeaconLocation : SteamPartyBeaconLocation_t, eData : ESteamPartyBeaconLocationData, pchDataStringOut : * mut :: std :: os :: raw :: c_char, cchDataStringOut : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_SteamRemoteStorage_v016() -> * mut ISteamRemoteStorage);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileWrite(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char, pvData : * const :: std :: os :: raw :: c_void, cubData : int32) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileRead(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char, pvData : * mut :: std :: os :: raw :: c_void, cubDataToRead : int32) -> int32);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileWriteAsync(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char, pvData : * const :: std :: os :: raw :: c_void, cubData : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileReadAsync(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char, nOffset : uint32, cubToRead : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(self_ : * mut ISteamRemoteStorage, hReadCall : SteamAPICall_t, pvBuffer : * mut :: std :: os :: raw :: c_void, cubToRead : uint32) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileForget(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileDelete(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileShare(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char, eRemoteStoragePlatform : ERemoteStoragePlatform) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char) -> UGCFileWriteStreamHandle_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(self_ : * mut ISteamRemoteStorage, writeHandle : UGCFileWriteStreamHandle_t, pvData : * const :: std :: os :: raw :: c_void, cubData : int32) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(self_ : * mut ISteamRemoteStorage, writeHandle : UGCFileWriteStreamHandle_t) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(self_ : * mut ISteamRemoteStorage, writeHandle : UGCFileWriteStreamHandle_t) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_FileExists(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_FilePersisted(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetFileSize(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char) -> int32);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetFileTimestamp(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char) -> int64);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char) -> ERemoteStoragePlatform);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetFileCount(self_ : * mut ISteamRemoteStorage) -> int32);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(self_ : * mut ISteamRemoteStorage, iFile : :: std :: os :: raw :: c_int, pnFileSizeInBytes : * mut int32) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetQuota(self_ : * mut ISteamRemoteStorage, pnTotalBytes : * mut uint64, puAvailableBytes : * mut uint64) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(self_ : * mut ISteamRemoteStorage) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(self_ : * mut ISteamRemoteStorage) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(self_ : * mut ISteamRemoteStorage, bEnabled : bool));
reexport!(fn SteamAPI_ISteamRemoteStorage_UGCDownload(self_ : * mut ISteamRemoteStorage, hContent : UGCHandle_t, unPriority : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(self_ : * mut ISteamRemoteStorage, hContent : UGCHandle_t, pnBytesDownloaded : * mut int32, pnBytesExpected : * mut int32) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetUGCDetails(self_ : * mut ISteamRemoteStorage, hContent : UGCHandle_t, pnAppID : * mut AppId_t, ppchName : * mut * mut :: std :: os :: raw :: c_char, pnFileSizeInBytes : * mut int32, pSteamIDOwner : * mut CSteamID) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_UGCRead(self_ : * mut ISteamRemoteStorage, hContent : UGCHandle_t, pvData : * mut :: std :: os :: raw :: c_void, cubDataToRead : int32, cOffset : uint32, eAction : EUGCReadAction) -> int32);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(self_ : * mut ISteamRemoteStorage) -> int32);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(self_ : * mut ISteamRemoteStorage, iCachedContent : int32) -> UGCHandle_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(self_ : * mut ISteamRemoteStorage, pchFile : * const :: std :: os :: raw :: c_char, pchPreviewFile : * const :: std :: os :: raw :: c_char, nConsumerAppId : AppId_t, pchTitle : * const :: std :: os :: raw :: c_char, pchDescription : * const :: std :: os :: raw :: c_char, eVisibility : ERemoteStoragePublishedFileVisibility, pTags : * mut SteamParamStringArray_t, eWorkshopFileType : EWorkshopFileType) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(self_ : * mut ISteamRemoteStorage, unPublishedFileId : PublishedFileId_t) -> PublishedFileUpdateHandle_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(self_ : * mut ISteamRemoteStorage, updateHandle : PublishedFileUpdateHandle_t, pchFile : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(self_ : * mut ISteamRemoteStorage, updateHandle : PublishedFileUpdateHandle_t, pchPreviewFile : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(self_ : * mut ISteamRemoteStorage, updateHandle : PublishedFileUpdateHandle_t, pchTitle : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(self_ : * mut ISteamRemoteStorage, updateHandle : PublishedFileUpdateHandle_t, pchDescription : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(self_ : * mut ISteamRemoteStorage, updateHandle : PublishedFileUpdateHandle_t, eVisibility : ERemoteStoragePublishedFileVisibility) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(self_ : * mut ISteamRemoteStorage, updateHandle : PublishedFileUpdateHandle_t, pTags : * mut SteamParamStringArray_t) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(self_ : * mut ISteamRemoteStorage, updateHandle : PublishedFileUpdateHandle_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(self_ : * mut ISteamRemoteStorage, unPublishedFileId : PublishedFileId_t, unMaxSecondsOld : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_DeletePublishedFile(self_ : * mut ISteamRemoteStorage, unPublishedFileId : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(self_ : * mut ISteamRemoteStorage, unStartIndex : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(self_ : * mut ISteamRemoteStorage, unPublishedFileId : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(self_ : * mut ISteamRemoteStorage, unStartIndex : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(self_ : * mut ISteamRemoteStorage, unPublishedFileId : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(self_ : * mut ISteamRemoteStorage, updateHandle : PublishedFileUpdateHandle_t, pchChangeDescription : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(self_ : * mut ISteamRemoteStorage, unPublishedFileId : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(self_ : * mut ISteamRemoteStorage, unPublishedFileId : PublishedFileId_t, bVoteUp : bool) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(self_ : * mut ISteamRemoteStorage, unPublishedFileId : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(self_ : * mut ISteamRemoteStorage, steamId : uint64_steamid, unStartIndex : uint32, pRequiredTags : * mut SteamParamStringArray_t, pExcludedTags : * mut SteamParamStringArray_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_PublishVideo(self_ : * mut ISteamRemoteStorage, eVideoProvider : EWorkshopVideoProvider, pchVideoAccount : * const :: std :: os :: raw :: c_char, pchVideoIdentifier : * const :: std :: os :: raw :: c_char, pchPreviewFile : * const :: std :: os :: raw :: c_char, nConsumerAppId : AppId_t, pchTitle : * const :: std :: os :: raw :: c_char, pchDescription : * const :: std :: os :: raw :: c_char, eVisibility : ERemoteStoragePublishedFileVisibility, pTags : * mut SteamParamStringArray_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(self_ : * mut ISteamRemoteStorage, unPublishedFileId : PublishedFileId_t, eAction : EWorkshopFileAction) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(self_ : * mut ISteamRemoteStorage, eAction : EWorkshopFileAction, unStartIndex : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(self_ : * mut ISteamRemoteStorage, eEnumerationType : EWorkshopEnumerationType, unStartIndex : uint32, unCount : uint32, unDays : uint32, pTags : * mut SteamParamStringArray_t, pUserTags : * mut SteamParamStringArray_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(self_ : * mut ISteamRemoteStorage, hContent : UGCHandle_t, pchLocation : * const :: std :: os :: raw :: c_char, unPriority : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount(self_ : * mut ISteamRemoteStorage) -> int32);
reexport!(fn SteamAPI_ISteamRemoteStorage_GetLocalFileChange(self_ : * mut ISteamRemoteStorage, iFile : :: std :: os :: raw :: c_int, pEChangeType : * mut ERemoteStorageLocalFileChange, pEFilePathType : * mut ERemoteStorageFilePathType) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch(self_ : * mut ISteamRemoteStorage) -> bool);
reexport!(fn SteamAPI_ISteamRemoteStorage_EndFileWriteBatch(self_ : * mut ISteamRemoteStorage) -> bool);
reexport!(fn SteamAPI_SteamUserStats_v012() -> * mut ISteamUserStats);
reexport!(fn SteamAPI_ISteamUserStats_RequestCurrentStats(self_ : * mut ISteamUserStats) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetStatInt32(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, pData : * mut int32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetStatFloat(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, pData : * mut f32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_SetStatInt32(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, nData : int32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_SetStatFloat(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, fData : f32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_UpdateAvgRateStat(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, flCountThisSession : f32, dSessionLength : f64) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetAchievement(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, pbAchieved : * mut bool) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_SetAchievement(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_ClearAchievement(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, pbAchieved : * mut bool, punUnlockTime : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_StoreStats(self_ : * mut ISteamUserStats) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetAchievementIcon(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, pchKey : * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamUserStats_IndicateAchievementProgress(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, nCurProgress : uint32, nMaxProgress : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetNumAchievements(self_ : * mut ISteamUserStats) -> uint32);
reexport!(fn SteamAPI_ISteamUserStats_GetAchievementName(self_ : * mut ISteamUserStats, iAchievement : uint32) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamUserStats_RequestUserStats(self_ : * mut ISteamUserStats, steamIDUser : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUserStats_GetUserStatInt32(self_ : * mut ISteamUserStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char, pData : * mut int32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetUserStatFloat(self_ : * mut ISteamUserStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char, pData : * mut f32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetUserAchievement(self_ : * mut ISteamUserStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char, pbAchieved : * mut bool) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(self_ : * mut ISteamUserStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char, pbAchieved : * mut bool, punUnlockTime : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_ResetAllStats(self_ : * mut ISteamUserStats, bAchievementsToo : bool) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(self_ : * mut ISteamUserStats, pchLeaderboardName : * const :: std :: os :: raw :: c_char, eLeaderboardSortMethod : ELeaderboardSortMethod, eLeaderboardDisplayType : ELeaderboardDisplayType) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUserStats_FindLeaderboard(self_ : * mut ISteamUserStats, pchLeaderboardName : * const :: std :: os :: raw :: c_char) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUserStats_GetLeaderboardName(self_ : * mut ISteamUserStats, hSteamLeaderboard : SteamLeaderboard_t) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(self_ : * mut ISteamUserStats, hSteamLeaderboard : SteamLeaderboard_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(self_ : * mut ISteamUserStats, hSteamLeaderboard : SteamLeaderboard_t) -> ELeaderboardSortMethod);
reexport!(fn SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(self_ : * mut ISteamUserStats, hSteamLeaderboard : SteamLeaderboard_t) -> ELeaderboardDisplayType);
reexport!(fn SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(self_ : * mut ISteamUserStats, hSteamLeaderboard : SteamLeaderboard_t, eLeaderboardDataRequest : ELeaderboardDataRequest, nRangeStart : :: std :: os :: raw :: c_int, nRangeEnd : :: std :: os :: raw :: c_int) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(self_ : * mut ISteamUserStats, hSteamLeaderboard : SteamLeaderboard_t, prgUsers : * mut CSteamID, cUsers : :: std :: os :: raw :: c_int) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(self_ : * mut ISteamUserStats, hSteamLeaderboardEntries : SteamLeaderboardEntries_t, index : :: std :: os :: raw :: c_int, pLeaderboardEntry : * mut LeaderboardEntry_t, pDetails : * mut int32, cDetailsMax : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_UploadLeaderboardScore(self_ : * mut ISteamUserStats, hSteamLeaderboard : SteamLeaderboard_t, eLeaderboardUploadScoreMethod : ELeaderboardUploadScoreMethod, nScore : int32, pScoreDetails : * const int32, cScoreDetailsCount : :: std :: os :: raw :: c_int) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUserStats_AttachLeaderboardUGC(self_ : * mut ISteamUserStats, hSteamLeaderboard : SteamLeaderboard_t, hUGC : UGCHandle_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(self_ : * mut ISteamUserStats) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(self_ : * mut ISteamUserStats) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(self_ : * mut ISteamUserStats, pchName : * mut :: std :: os :: raw :: c_char, unNameBufLen : uint32, pflPercent : * mut f32, pbAchieved : * mut bool) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(self_ : * mut ISteamUserStats, iIteratorPrevious : :: std :: os :: raw :: c_int, pchName : * mut :: std :: os :: raw :: c_char, unNameBufLen : uint32, pflPercent : * mut f32, pbAchieved : * mut bool) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, pflPercent : * mut f32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_RequestGlobalStats(self_ : * mut ISteamUserStats, nHistoryDays : :: std :: os :: raw :: c_int) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUserStats_GetGlobalStatInt64(self_ : * mut ISteamUserStats, pchStatName : * const :: std :: os :: raw :: c_char, pData : * mut int64) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetGlobalStatDouble(self_ : * mut ISteamUserStats, pchStatName : * const :: std :: os :: raw :: c_char, pData : * mut f64) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(self_ : * mut ISteamUserStats, pchStatName : * const :: std :: os :: raw :: c_char, pData : * mut int64, cubData : uint32) -> int32);
reexport!(fn SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(self_ : * mut ISteamUserStats, pchStatName : * const :: std :: os :: raw :: c_char, pData : * mut f64, cubData : uint32) -> int32);
reexport!(fn SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, pnMinProgress : * mut int32, pnMaxProgress : * mut int32) -> bool);
reexport!(fn SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat(self_ : * mut ISteamUserStats, pchName : * const :: std :: os :: raw :: c_char, pfMinProgress : * mut f32, pfMaxProgress : * mut f32) -> bool);
reexport!(fn SteamAPI_ISteamApps_BIsSubscribed(self_ : * mut ISteamApps) -> bool);
reexport!(fn SteamAPI_ISteamApps_BIsLowViolence(self_ : * mut ISteamApps) -> bool);
reexport!(fn SteamAPI_ISteamApps_BIsCybercafe(self_ : * mut ISteamApps) -> bool);
reexport!(fn SteamAPI_ISteamApps_BIsVACBanned(self_ : * mut ISteamApps) -> bool);
reexport!(fn SteamAPI_ISteamApps_GetCurrentGameLanguage(self_ : * mut ISteamApps) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamApps_GetAvailableGameLanguages(self_ : * mut ISteamApps) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamApps_BIsSubscribedApp(self_ : * mut ISteamApps, appID : AppId_t) -> bool);
reexport!(fn SteamAPI_ISteamApps_BIsDlcInstalled(self_ : * mut ISteamApps, appID : AppId_t) -> bool);
reexport!(fn SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(self_ : * mut ISteamApps, nAppID : AppId_t) -> uint32);
reexport!(fn SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(self_ : * mut ISteamApps) -> bool);
reexport!(fn SteamAPI_ISteamApps_GetDLCCount(self_ : * mut ISteamApps) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamApps_BGetDLCDataByIndex(self_ : * mut ISteamApps, iDLC : :: std :: os :: raw :: c_int, pAppID : * mut AppId_t, pbAvailable : * mut bool, pchName : * mut :: std :: os :: raw :: c_char, cchNameBufferSize : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamApps_InstallDLC(self_ : * mut ISteamApps, nAppID : AppId_t));
reexport!(fn SteamAPI_ISteamApps_UninstallDLC(self_ : * mut ISteamApps, nAppID : AppId_t));
reexport!(fn SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(self_ : * mut ISteamApps, nAppID : AppId_t));
reexport!(fn SteamAPI_ISteamApps_GetCurrentBetaName(self_ : * mut ISteamApps, pchName : * mut :: std :: os :: raw :: c_char, cchNameBufferSize : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamApps_MarkContentCorrupt(self_ : * mut ISteamApps, bMissingFilesOnly : bool) -> bool);
reexport!(fn SteamAPI_ISteamApps_GetInstalledDepots(self_ : * mut ISteamApps, appID : AppId_t, pvecDepots : * mut DepotId_t, cMaxDepots : uint32) -> uint32);
reexport!(fn SteamAPI_ISteamApps_GetAppInstallDir(self_ : * mut ISteamApps, appID : AppId_t, pchFolder : * mut :: std :: os :: raw :: c_char, cchFolderBufferSize : uint32) -> uint32);
reexport!(fn SteamAPI_ISteamApps_BIsAppInstalled(self_ : * mut ISteamApps, appID : AppId_t) -> bool);
reexport!(fn SteamAPI_ISteamApps_GetAppOwner(self_ : * mut ISteamApps) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamApps_GetLaunchQueryParam(self_ : * mut ISteamApps, pchKey : * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamApps_GetDlcDownloadProgress(self_ : * mut ISteamApps, nAppID : AppId_t, punBytesDownloaded : * mut uint64, punBytesTotal : * mut uint64) -> bool);
reexport!(fn SteamAPI_ISteamApps_GetAppBuildId(self_ : * mut ISteamApps) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(self_ : * mut ISteamApps));
reexport!(fn SteamAPI_ISteamApps_GetFileDetails(self_ : * mut ISteamApps, pszFileName : * const :: std :: os :: raw :: c_char) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamApps_GetLaunchCommandLine(self_ : * mut ISteamApps, pszCommandLine : * mut :: std :: os :: raw :: c_char, cubCommandLine : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing(self_ : * mut ISteamApps) -> bool);
reexport!(fn SteamAPI_ISteamApps_BIsTimedTrial(self_ : * mut ISteamApps, punSecondsAllowed : * mut uint32, punSecondsPlayed : * mut uint32) -> bool);
reexport!(fn SteamAPI_SteamNetworking_v006() -> * mut ISteamNetworking);
reexport!(fn SteamAPI_SteamGameServerNetworking_v006() -> * mut ISteamNetworking);
reexport!(fn SteamAPI_ISteamNetworking_SendP2PPacket(self_ : * mut ISteamNetworking, steamIDRemote : uint64_steamid, pubData : * const :: std :: os :: raw :: c_void, cubData : uint32, eP2PSendType : EP2PSend, nChannel : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_IsP2PPacketAvailable(self_ : * mut ISteamNetworking, pcubMsgSize : * mut uint32, nChannel : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_ReadP2PPacket(self_ : * mut ISteamNetworking, pubDest : * mut :: std :: os :: raw :: c_void, cubDest : uint32, pcubMsgSize : * mut uint32, psteamIDRemote : * mut CSteamID, nChannel : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(self_ : * mut ISteamNetworking, steamIDRemote : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(self_ : * mut ISteamNetworking, steamIDRemote : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(self_ : * mut ISteamNetworking, steamIDRemote : uint64_steamid, nChannel : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_GetP2PSessionState(self_ : * mut ISteamNetworking, steamIDRemote : uint64_steamid, pConnectionState : * mut P2PSessionState_t) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_AllowP2PPacketRelay(self_ : * mut ISteamNetworking, bAllow : bool) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_CreateListenSocket(self_ : * mut ISteamNetworking, nVirtualP2PPort : :: std :: os :: raw :: c_int, nIP : SteamIPAddress_t, nPort : uint16, bAllowUseOfPacketRelay : bool) -> SNetListenSocket_t);
reexport!(fn SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(self_ : * mut ISteamNetworking, steamIDTarget : uint64_steamid, nVirtualPort : :: std :: os :: raw :: c_int, nTimeoutSec : :: std :: os :: raw :: c_int, bAllowUseOfPacketRelay : bool) -> SNetSocket_t);
reexport!(fn SteamAPI_ISteamNetworking_CreateConnectionSocket(self_ : * mut ISteamNetworking, nIP : SteamIPAddress_t, nPort : uint16, nTimeoutSec : :: std :: os :: raw :: c_int) -> SNetSocket_t);
reexport!(fn SteamAPI_ISteamNetworking_DestroySocket(self_ : * mut ISteamNetworking, hSocket : SNetSocket_t, bNotifyRemoteEnd : bool) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_DestroyListenSocket(self_ : * mut ISteamNetworking, hSocket : SNetListenSocket_t, bNotifyRemoteEnd : bool) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_SendDataOnSocket(self_ : * mut ISteamNetworking, hSocket : SNetSocket_t, pubData : * mut :: std :: os :: raw :: c_void, cubData : uint32, bReliable : bool) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(self_ : * mut ISteamNetworking, hSocket : SNetSocket_t, pcubMsgSize : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_RetrieveDataFromSocket(self_ : * mut ISteamNetworking, hSocket : SNetSocket_t, pubDest : * mut :: std :: os :: raw :: c_void, cubDest : uint32, pcubMsgSize : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_IsDataAvailable(self_ : * mut ISteamNetworking, hListenSocket : SNetListenSocket_t, pcubMsgSize : * mut uint32, phSocket : * mut SNetSocket_t) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_RetrieveData(self_ : * mut ISteamNetworking, hListenSocket : SNetListenSocket_t, pubDest : * mut :: std :: os :: raw :: c_void, cubDest : uint32, pcubMsgSize : * mut uint32, phSocket : * mut SNetSocket_t) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_GetSocketInfo(self_ : * mut ISteamNetworking, hSocket : SNetSocket_t, pSteamIDRemote : * mut CSteamID, peSocketStatus : * mut :: std :: os :: raw :: c_int, punIPRemote : * mut SteamIPAddress_t, punPortRemote : * mut uint16) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_GetListenSocketInfo(self_ : * mut ISteamNetworking, hListenSocket : SNetListenSocket_t, pnIP : * mut SteamIPAddress_t, pnPort : * mut uint16) -> bool);
reexport!(fn SteamAPI_ISteamNetworking_GetSocketConnectionType(self_ : * mut ISteamNetworking, hSocket : SNetSocket_t) -> ESNetSocketConnectionType);
reexport!(fn SteamAPI_ISteamNetworking_GetMaxPacketSize(self_ : * mut ISteamNetworking, hSocket : SNetSocket_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_SteamScreenshots_v003() -> * mut ISteamScreenshots);
reexport!(fn SteamAPI_ISteamScreenshots_WriteScreenshot(self_ : * mut ISteamScreenshots, pubRGB : * mut :: std :: os :: raw :: c_void, cubRGB : uint32, nWidth : :: std :: os :: raw :: c_int, nHeight : :: std :: os :: raw :: c_int) -> ScreenshotHandle);
reexport!(fn SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(self_ : * mut ISteamScreenshots, pchFilename : * const :: std :: os :: raw :: c_char, pchThumbnailFilename : * const :: std :: os :: raw :: c_char, nWidth : :: std :: os :: raw :: c_int, nHeight : :: std :: os :: raw :: c_int) -> ScreenshotHandle);
reexport!(fn SteamAPI_ISteamScreenshots_TriggerScreenshot(self_ : * mut ISteamScreenshots));
reexport!(fn SteamAPI_ISteamScreenshots_HookScreenshots(self_ : * mut ISteamScreenshots, bHook : bool));
reexport!(fn SteamAPI_ISteamScreenshots_SetLocation(self_ : * mut ISteamScreenshots, hScreenshot : ScreenshotHandle, pchLocation : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamScreenshots_TagUser(self_ : * mut ISteamScreenshots, hScreenshot : ScreenshotHandle, steamID : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamScreenshots_TagPublishedFile(self_ : * mut ISteamScreenshots, hScreenshot : ScreenshotHandle, unPublishedFileID : PublishedFileId_t) -> bool);
reexport!(fn SteamAPI_ISteamScreenshots_IsScreenshotsHooked(self_ : * mut ISteamScreenshots) -> bool);
reexport!(fn SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(self_ : * mut ISteamScreenshots, eType : EVRScreenshotType, pchFilename : * const :: std :: os :: raw :: c_char, pchVRFilename : * const :: std :: os :: raw :: c_char) -> ScreenshotHandle);
reexport!(fn SteamAPI_SteamMusic_v001() -> * mut ISteamMusic);
reexport!(fn SteamAPI_ISteamMusic_BIsEnabled(self_ : * mut ISteamMusic) -> bool);
reexport!(fn SteamAPI_ISteamMusic_BIsPlaying(self_ : * mut ISteamMusic) -> bool);
reexport!(fn SteamAPI_ISteamMusic_GetPlaybackStatus(self_ : * mut ISteamMusic) -> AudioPlayback_Status);
reexport!(fn SteamAPI_ISteamMusic_Play(self_ : * mut ISteamMusic));
reexport!(fn SteamAPI_ISteamMusic_Pause(self_ : * mut ISteamMusic));
reexport!(fn SteamAPI_ISteamMusic_PlayPrevious(self_ : * mut ISteamMusic));
reexport!(fn SteamAPI_ISteamMusic_PlayNext(self_ : * mut ISteamMusic));
reexport!(fn SteamAPI_ISteamMusic_SetVolume(self_ : * mut ISteamMusic, flVolume : f32));
reexport!(fn SteamAPI_ISteamMusic_GetVolume(self_ : * mut ISteamMusic) -> f32);
reexport!(fn SteamAPI_SteamMusicRemote_v001() -> * mut ISteamMusicRemote);
reexport!(fn SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(self_ : * mut ISteamMusicRemote, pchName : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(self_ : * mut ISteamMusicRemote) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(self_ : * mut ISteamMusicRemote) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_BActivationSuccess(self_ : * mut ISteamMusicRemote, bValue : bool) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_SetDisplayName(self_ : * mut ISteamMusicRemote, pchDisplayName : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(self_ : * mut ISteamMusicRemote, pvBuffer : * mut :: std :: os :: raw :: c_void, cbBufferLength : uint32) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_EnablePlayPrevious(self_ : * mut ISteamMusicRemote, bValue : bool) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_EnablePlayNext(self_ : * mut ISteamMusicRemote, bValue : bool) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_EnableShuffled(self_ : * mut ISteamMusicRemote, bValue : bool) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_EnableLooped(self_ : * mut ISteamMusicRemote, bValue : bool) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_EnableQueue(self_ : * mut ISteamMusicRemote, bValue : bool) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_EnablePlaylists(self_ : * mut ISteamMusicRemote, bValue : bool) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(self_ : * mut ISteamMusicRemote, nStatus : AudioPlayback_Status) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_UpdateShuffled(self_ : * mut ISteamMusicRemote, bValue : bool) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_UpdateLooped(self_ : * mut ISteamMusicRemote, bValue : bool) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_UpdateVolume(self_ : * mut ISteamMusicRemote, flValue : f32) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(self_ : * mut ISteamMusicRemote) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(self_ : * mut ISteamMusicRemote, bAvailable : bool) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(self_ : * mut ISteamMusicRemote, pchText : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(self_ : * mut ISteamMusicRemote, nValue : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(self_ : * mut ISteamMusicRemote, pvBuffer : * mut :: std :: os :: raw :: c_void, cbBufferLength : uint32) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(self_ : * mut ISteamMusicRemote) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_QueueWillChange(self_ : * mut ISteamMusicRemote) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_ResetQueueEntries(self_ : * mut ISteamMusicRemote) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_SetQueueEntry(self_ : * mut ISteamMusicRemote, nID : :: std :: os :: raw :: c_int, nPosition : :: std :: os :: raw :: c_int, pchEntryText : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(self_ : * mut ISteamMusicRemote, nID : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_QueueDidChange(self_ : * mut ISteamMusicRemote) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_PlaylistWillChange(self_ : * mut ISteamMusicRemote) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(self_ : * mut ISteamMusicRemote) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_SetPlaylistEntry(self_ : * mut ISteamMusicRemote, nID : :: std :: os :: raw :: c_int, nPosition : :: std :: os :: raw :: c_int, pchEntryText : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(self_ : * mut ISteamMusicRemote, nID : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamMusicRemote_PlaylistDidChange(self_ : * mut ISteamMusicRemote) -> bool);
reexport!(fn SteamAPI_SteamHTTP_v003() -> * mut ISteamHTTP);
reexport!(fn SteamAPI_SteamGameServerHTTP_v003() -> * mut ISteamHTTP);
reexport!(fn SteamAPI_ISteamHTTP_CreateHTTPRequest(self_ : * mut ISteamHTTP, eHTTPRequestMethod : EHTTPMethod, pchAbsoluteURL : * const :: std :: os :: raw :: c_char) -> HTTPRequestHandle);
reexport!(fn SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, ulContextValue : uint64) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, unTimeoutSeconds : uint32) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pchHeaderName : * const :: std :: os :: raw :: c_char, pchHeaderValue : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pchParamName : * const :: std :: os :: raw :: c_char, pchParamValue : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SendHTTPRequest(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pCallHandle : * mut SteamAPICall_t) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pCallHandle : * mut SteamAPICall_t) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_DeferHTTPRequest(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pchHeaderName : * const :: std :: os :: raw :: c_char, unResponseHeaderSize : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pchHeaderName : * const :: std :: os :: raw :: c_char, pHeaderValueBuffer : * mut uint8, unBufferSize : uint32) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, unBodySize : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pBodyDataBuffer : * mut uint8, unBufferSize : uint32) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, cOffset : uint32, pBodyDataBuffer : * mut uint8, unBufferSize : uint32) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_ReleaseHTTPRequest(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pflPercentOut : * mut f32) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pchContentType : * const :: std :: os :: raw :: c_char, pubBody : * mut uint8, unBodyLen : uint32) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_CreateCookieContainer(self_ : * mut ISteamHTTP, bAllowResponsesToModify : bool) -> HTTPCookieContainerHandle);
reexport!(fn SteamAPI_ISteamHTTP_ReleaseCookieContainer(self_ : * mut ISteamHTTP, hCookieContainer : HTTPCookieContainerHandle) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SetCookie(self_ : * mut ISteamHTTP, hCookieContainer : HTTPCookieContainerHandle, pchHost : * const :: std :: os :: raw :: c_char, pchUrl : * const :: std :: os :: raw :: c_char, pchCookie : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, hCookieContainer : HTTPCookieContainerHandle) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pchUserAgentInfo : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, bRequireVerifiedCertificate : bool) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, unMilliseconds : uint32) -> bool);
reexport!(fn SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(self_ : * mut ISteamHTTP, hRequest : HTTPRequestHandle, pbWasTimedOut : * mut bool) -> bool);
reexport!(fn SteamAPI_SteamInput_v006() -> * mut ISteamInput);
reexport!(fn SteamAPI_ISteamInput_Init(self_ : * mut ISteamInput, bExplicitlyCallRunFrame : bool) -> bool);
reexport!(fn SteamAPI_ISteamInput_Shutdown(self_ : * mut ISteamInput) -> bool);
reexport!(fn SteamAPI_ISteamInput_SetInputActionManifestFilePath(self_ : * mut ISteamInput, pchInputActionManifestAbsolutePath : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamInput_RunFrame(self_ : * mut ISteamInput, bReservedValue : bool));
reexport!(fn SteamAPI_ISteamInput_BWaitForData(self_ : * mut ISteamInput, bWaitForever : bool, unTimeout : uint32) -> bool);
reexport!(fn SteamAPI_ISteamInput_BNewDataAvailable(self_ : * mut ISteamInput) -> bool);
reexport!(fn SteamAPI_ISteamInput_GetConnectedControllers(self_ : * mut ISteamInput, handlesOut : * mut InputHandle_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamInput_EnableDeviceCallbacks(self_ : * mut ISteamInput));
reexport!(fn SteamAPI_ISteamInput_EnableActionEventCallbacks(self_ : * mut ISteamInput, pCallback : SteamInputActionEventCallbackPointer));
reexport!(fn SteamAPI_ISteamInput_GetActionSetHandle(self_ : * mut ISteamInput, pszActionSetName : * const :: std :: os :: raw :: c_char) -> InputActionSetHandle_t);
reexport!(fn SteamAPI_ISteamInput_ActivateActionSet(self_ : * mut ISteamInput, inputHandle : InputHandle_t, actionSetHandle : InputActionSetHandle_t));
reexport!(fn SteamAPI_ISteamInput_GetCurrentActionSet(self_ : * mut ISteamInput, inputHandle : InputHandle_t) -> InputActionSetHandle_t);
reexport!(fn SteamAPI_ISteamInput_ActivateActionSetLayer(self_ : * mut ISteamInput, inputHandle : InputHandle_t, actionSetLayerHandle : InputActionSetHandle_t));
reexport!(fn SteamAPI_ISteamInput_DeactivateActionSetLayer(self_ : * mut ISteamInput, inputHandle : InputHandle_t, actionSetLayerHandle : InputActionSetHandle_t));
reexport!(fn SteamAPI_ISteamInput_DeactivateAllActionSetLayers(self_ : * mut ISteamInput, inputHandle : InputHandle_t));
reexport!(fn SteamAPI_ISteamInput_GetActiveActionSetLayers(self_ : * mut ISteamInput, inputHandle : InputHandle_t, handlesOut : * mut InputActionSetHandle_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamInput_GetDigitalActionHandle(self_ : * mut ISteamInput, pszActionName : * const :: std :: os :: raw :: c_char) -> InputDigitalActionHandle_t);
reexport!(fn SteamAPI_ISteamInput_GetDigitalActionData(self_ : * mut ISteamInput, inputHandle : InputHandle_t, digitalActionHandle : InputDigitalActionHandle_t) -> InputDigitalActionData_t);
reexport!(fn SteamAPI_ISteamInput_GetDigitalActionOrigins(self_ : * mut ISteamInput, inputHandle : InputHandle_t, actionSetHandle : InputActionSetHandle_t, digitalActionHandle : InputDigitalActionHandle_t, originsOut : * mut EInputActionOrigin) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamInput_GetStringForDigitalActionName(self_ : * mut ISteamInput, eActionHandle : InputDigitalActionHandle_t) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamInput_GetAnalogActionHandle(self_ : * mut ISteamInput, pszActionName : * const :: std :: os :: raw :: c_char) -> InputAnalogActionHandle_t);
reexport!(fn SteamAPI_ISteamInput_GetAnalogActionData(self_ : * mut ISteamInput, inputHandle : InputHandle_t, analogActionHandle : InputAnalogActionHandle_t) -> InputAnalogActionData_t);
reexport!(fn SteamAPI_ISteamInput_GetAnalogActionOrigins(self_ : * mut ISteamInput, inputHandle : InputHandle_t, actionSetHandle : InputActionSetHandle_t, analogActionHandle : InputAnalogActionHandle_t, originsOut : * mut EInputActionOrigin) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamInput_GetGlyphPNGForActionOrigin(self_ : * mut ISteamInput, eOrigin : EInputActionOrigin, eSize : ESteamInputGlyphSize, unFlags : uint32) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamInput_GetGlyphSVGForActionOrigin(self_ : * mut ISteamInput, eOrigin : EInputActionOrigin, unFlags : uint32) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamInput_GetGlyphForActionOrigin_Legacy(self_ : * mut ISteamInput, eOrigin : EInputActionOrigin) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamInput_GetStringForActionOrigin(self_ : * mut ISteamInput, eOrigin : EInputActionOrigin) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamInput_GetStringForAnalogActionName(self_ : * mut ISteamInput, eActionHandle : InputAnalogActionHandle_t) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamInput_StopAnalogActionMomentum(self_ : * mut ISteamInput, inputHandle : InputHandle_t, eAction : InputAnalogActionHandle_t));
reexport!(fn SteamAPI_ISteamInput_GetMotionData(self_ : * mut ISteamInput, inputHandle : InputHandle_t) -> InputMotionData_t);
reexport!(fn SteamAPI_ISteamInput_TriggerVibration(self_ : * mut ISteamInput, inputHandle : InputHandle_t, usLeftSpeed : :: std :: os :: raw :: c_ushort, usRightSpeed : :: std :: os :: raw :: c_ushort));
reexport!(fn SteamAPI_ISteamInput_TriggerVibrationExtended(self_ : * mut ISteamInput, inputHandle : InputHandle_t, usLeftSpeed : :: std :: os :: raw :: c_ushort, usRightSpeed : :: std :: os :: raw :: c_ushort, usLeftTriggerSpeed : :: std :: os :: raw :: c_ushort, usRightTriggerSpeed : :: std :: os :: raw :: c_ushort));
reexport!(fn SteamAPI_ISteamInput_TriggerSimpleHapticEvent(self_ : * mut ISteamInput, inputHandle : InputHandle_t, eHapticLocation : EControllerHapticLocation, nIntensity : uint8, nGainDB : :: std :: os :: raw :: c_char, nOtherIntensity : uint8, nOtherGainDB : :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamInput_SetLEDColor(self_ : * mut ISteamInput, inputHandle : InputHandle_t, nColorR : uint8, nColorG : uint8, nColorB : uint8, nFlags : :: std :: os :: raw :: c_uint));
reexport!(fn SteamAPI_ISteamInput_Legacy_TriggerHapticPulse(self_ : * mut ISteamInput, inputHandle : InputHandle_t, eTargetPad : ESteamControllerPad, usDurationMicroSec : :: std :: os :: raw :: c_ushort));
reexport!(fn SteamAPI_ISteamInput_Legacy_TriggerRepeatedHapticPulse(self_ : * mut ISteamInput, inputHandle : InputHandle_t, eTargetPad : ESteamControllerPad, usDurationMicroSec : :: std :: os :: raw :: c_ushort, usOffMicroSec : :: std :: os :: raw :: c_ushort, unRepeat : :: std :: os :: raw :: c_ushort, nFlags : :: std :: os :: raw :: c_uint));
reexport!(fn SteamAPI_ISteamInput_ShowBindingPanel(self_ : * mut ISteamInput, inputHandle : InputHandle_t) -> bool);
reexport!(fn SteamAPI_ISteamInput_GetInputTypeForHandle(self_ : * mut ISteamInput, inputHandle : InputHandle_t) -> ESteamInputType);
reexport!(fn SteamAPI_ISteamInput_GetControllerForGamepadIndex(self_ : * mut ISteamInput, nIndex : :: std :: os :: raw :: c_int) -> InputHandle_t);
reexport!(fn SteamAPI_ISteamInput_GetGamepadIndexForController(self_ : * mut ISteamInput, ulinputHandle : InputHandle_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamInput_GetStringForXboxOrigin(self_ : * mut ISteamInput, eOrigin : EXboxOrigin) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamInput_GetGlyphForXboxOrigin(self_ : * mut ISteamInput, eOrigin : EXboxOrigin) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin(self_ : * mut ISteamInput, inputHandle : InputHandle_t, eOrigin : EXboxOrigin) -> EInputActionOrigin);
reexport!(fn SteamAPI_ISteamInput_TranslateActionOrigin(self_ : * mut ISteamInput, eDestinationInputType : ESteamInputType, eSourceOrigin : EInputActionOrigin) -> EInputActionOrigin);
reexport!(fn SteamAPI_ISteamInput_GetDeviceBindingRevision(self_ : * mut ISteamInput, inputHandle : InputHandle_t, pMajor : * mut :: std :: os :: raw :: c_int, pMinor : * mut :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamInput_GetRemotePlaySessionID(self_ : * mut ISteamInput, inputHandle : InputHandle_t) -> uint32);
reexport!(fn SteamAPI_ISteamInput_GetSessionInputConfigurationSettings(self_ : * mut ISteamInput) -> uint16);
reexport!(fn SteamAPI_SteamController_v008() -> * mut ISteamController);
reexport!(fn SteamAPI_ISteamController_Init(self_ : * mut ISteamController) -> bool);
reexport!(fn SteamAPI_ISteamController_Shutdown(self_ : * mut ISteamController) -> bool);
reexport!(fn SteamAPI_ISteamController_RunFrame(self_ : * mut ISteamController));
reexport!(fn SteamAPI_ISteamController_GetConnectedControllers(self_ : * mut ISteamController, handlesOut : * mut ControllerHandle_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamController_GetActionSetHandle(self_ : * mut ISteamController, pszActionSetName : * const :: std :: os :: raw :: c_char) -> ControllerActionSetHandle_t);
reexport!(fn SteamAPI_ISteamController_ActivateActionSet(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, actionSetHandle : ControllerActionSetHandle_t));
reexport!(fn SteamAPI_ISteamController_GetCurrentActionSet(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t) -> ControllerActionSetHandle_t);
reexport!(fn SteamAPI_ISteamController_ActivateActionSetLayer(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, actionSetLayerHandle : ControllerActionSetHandle_t));
reexport!(fn SteamAPI_ISteamController_DeactivateActionSetLayer(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, actionSetLayerHandle : ControllerActionSetHandle_t));
reexport!(fn SteamAPI_ISteamController_DeactivateAllActionSetLayers(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t));
reexport!(fn SteamAPI_ISteamController_GetActiveActionSetLayers(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, handlesOut : * mut ControllerActionSetHandle_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamController_GetDigitalActionHandle(self_ : * mut ISteamController, pszActionName : * const :: std :: os :: raw :: c_char) -> ControllerDigitalActionHandle_t);
reexport!(fn SteamAPI_ISteamController_GetDigitalActionData(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, digitalActionHandle : ControllerDigitalActionHandle_t) -> InputDigitalActionData_t);
reexport!(fn SteamAPI_ISteamController_GetDigitalActionOrigins(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, actionSetHandle : ControllerActionSetHandle_t, digitalActionHandle : ControllerDigitalActionHandle_t, originsOut : * mut EControllerActionOrigin) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamController_GetAnalogActionHandle(self_ : * mut ISteamController, pszActionName : * const :: std :: os :: raw :: c_char) -> ControllerAnalogActionHandle_t);
reexport!(fn SteamAPI_ISteamController_GetAnalogActionData(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, analogActionHandle : ControllerAnalogActionHandle_t) -> InputAnalogActionData_t);
reexport!(fn SteamAPI_ISteamController_GetAnalogActionOrigins(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, actionSetHandle : ControllerActionSetHandle_t, analogActionHandle : ControllerAnalogActionHandle_t, originsOut : * mut EControllerActionOrigin) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamController_GetGlyphForActionOrigin(self_ : * mut ISteamController, eOrigin : EControllerActionOrigin) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamController_GetStringForActionOrigin(self_ : * mut ISteamController, eOrigin : EControllerActionOrigin) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamController_StopAnalogActionMomentum(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, eAction : ControllerAnalogActionHandle_t));
reexport!(fn SteamAPI_ISteamController_GetMotionData(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t) -> InputMotionData_t);
reexport!(fn SteamAPI_ISteamController_TriggerHapticPulse(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, eTargetPad : ESteamControllerPad, usDurationMicroSec : :: std :: os :: raw :: c_ushort));
reexport!(fn SteamAPI_ISteamController_TriggerRepeatedHapticPulse(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, eTargetPad : ESteamControllerPad, usDurationMicroSec : :: std :: os :: raw :: c_ushort, usOffMicroSec : :: std :: os :: raw :: c_ushort, unRepeat : :: std :: os :: raw :: c_ushort, nFlags : :: std :: os :: raw :: c_uint));
reexport!(fn SteamAPI_ISteamController_TriggerVibration(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, usLeftSpeed : :: std :: os :: raw :: c_ushort, usRightSpeed : :: std :: os :: raw :: c_ushort));
reexport!(fn SteamAPI_ISteamController_SetLEDColor(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, nColorR : uint8, nColorG : uint8, nColorB : uint8, nFlags : :: std :: os :: raw :: c_uint));
reexport!(fn SteamAPI_ISteamController_ShowBindingPanel(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t) -> bool);
reexport!(fn SteamAPI_ISteamController_GetInputTypeForHandle(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t) -> ESteamInputType);
reexport!(fn SteamAPI_ISteamController_GetControllerForGamepadIndex(self_ : * mut ISteamController, nIndex : :: std :: os :: raw :: c_int) -> ControllerHandle_t);
reexport!(fn SteamAPI_ISteamController_GetGamepadIndexForController(self_ : * mut ISteamController, ulControllerHandle : ControllerHandle_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamController_GetStringForXboxOrigin(self_ : * mut ISteamController, eOrigin : EXboxOrigin) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamController_GetGlyphForXboxOrigin(self_ : * mut ISteamController, eOrigin : EXboxOrigin) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamController_GetActionOriginFromXboxOrigin(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, eOrigin : EXboxOrigin) -> EControllerActionOrigin);
reexport!(fn SteamAPI_ISteamController_TranslateActionOrigin(self_ : * mut ISteamController, eDestinationInputType : ESteamInputType, eSourceOrigin : EControllerActionOrigin) -> EControllerActionOrigin);
reexport!(fn SteamAPI_ISteamController_GetControllerBindingRevision(self_ : * mut ISteamController, controllerHandle : ControllerHandle_t, pMajor : * mut :: std :: os :: raw :: c_int, pMinor : * mut :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_SteamUGC_v016() -> * mut ISteamUGC);
reexport!(fn SteamAPI_SteamGameServerUGC_v016() -> * mut ISteamUGC);
reexport!(fn SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(self_ : * mut ISteamUGC, unAccountID : AccountID_t, eListType : EUserUGCList, eMatchingUGCType : EUGCMatchingUGCType, eSortOrder : EUserUGCListSortOrder, nCreatorAppID : AppId_t, nConsumerAppID : AppId_t, unPage : uint32) -> UGCQueryHandle_t);
reexport!(fn SteamAPI_ISteamUGC_CreateQueryAllUGCRequestPage(self_ : * mut ISteamUGC, eQueryType : EUGCQuery, eMatchingeMatchingUGCTypeFileType : EUGCMatchingUGCType, nCreatorAppID : AppId_t, nConsumerAppID : AppId_t, unPage : uint32) -> UGCQueryHandle_t);
reexport!(fn SteamAPI_ISteamUGC_CreateQueryAllUGCRequestCursor(self_ : * mut ISteamUGC, eQueryType : EUGCQuery, eMatchingeMatchingUGCTypeFileType : EUGCMatchingUGCType, nCreatorAppID : AppId_t, nConsumerAppID : AppId_t, pchCursor : * const :: std :: os :: raw :: c_char) -> UGCQueryHandle_t);
reexport!(fn SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(self_ : * mut ISteamUGC, pvecPublishedFileID : * mut PublishedFileId_t, unNumPublishedFileIDs : uint32) -> UGCQueryHandle_t);
reexport!(fn SteamAPI_ISteamUGC_SendQueryUGCRequest(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCResult(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32, pDetails : * mut SteamUGCDetails_t) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCNumTags(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32) -> uint32);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCTag(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32, indexTag : uint32, pchValue : * mut :: std :: os :: raw :: c_char, cchValueSize : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32, indexTag : uint32, pchValue : * mut :: std :: os :: raw :: c_char, cchValueSize : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32, pchURL : * mut :: std :: os :: raw :: c_char, cchURLSize : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCMetadata(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32, pchMetadata : * mut :: std :: os :: raw :: c_char, cchMetadatasize : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCChildren(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32, pvecPublishedFileID : * mut PublishedFileId_t, cMaxEntries : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCStatistic(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32, eStatType : EItemStatistic, pStatValue : * mut uint64) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32) -> uint32);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32, previewIndex : uint32, pchURLOrVideoID : * mut :: std :: os :: raw :: c_char, cchURLSize : uint32, pchOriginalFileName : * mut :: std :: os :: raw :: c_char, cchOriginalFileNameSize : uint32, pPreviewType : * mut EItemPreviewType) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32) -> uint32);
reexport!(fn SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32, keyValueTagIndex : uint32, pchKey : * mut :: std :: os :: raw :: c_char, cchKeySize : uint32, pchValue : * mut :: std :: os :: raw :: c_char, cchValueSize : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, index : uint32, pchKey : * const :: std :: os :: raw :: c_char, pchValue : * mut :: std :: os :: raw :: c_char, cchValueSize : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t) -> bool);
reexport!(fn SteamAPI_ISteamUGC_AddRequiredTag(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, pTagName : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_AddRequiredTagGroup(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, pTagGroups : * const SteamParamStringArray_t) -> bool);
reexport!(fn SteamAPI_ISteamUGC_AddExcludedTag(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, pTagName : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetReturnOnlyIDs(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, bReturnOnlyIDs : bool) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetReturnKeyValueTags(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, bReturnKeyValueTags : bool) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetReturnLongDescription(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, bReturnLongDescription : bool) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetReturnMetadata(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, bReturnMetadata : bool) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetReturnChildren(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, bReturnChildren : bool) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, bReturnAdditionalPreviews : bool) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetReturnTotalOnly(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, bReturnTotalOnly : bool) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetReturnPlaytimeStats(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, unDays : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetLanguage(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, pchLanguage : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetAllowCachedResponse(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, unMaxAgeSeconds : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetCloudFileNameFilter(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, pMatchCloudFileName : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetMatchAnyTag(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, bMatchAnyTag : bool) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetSearchText(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, pSearchText : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetRankedByTrendDays(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, unDays : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetTimeCreatedDateRange(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, rtStart : RTime32, rtEnd : RTime32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetTimeUpdatedDateRange(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, rtStart : RTime32, rtEnd : RTime32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_AddRequiredKeyValueTag(self_ : * mut ISteamUGC, handle : UGCQueryHandle_t, pKey : * const :: std :: os :: raw :: c_char, pValue : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_RequestUGCDetails(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t, unMaxAgeSeconds : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_CreateItem(self_ : * mut ISteamUGC, nConsumerAppId : AppId_t, eFileType : EWorkshopFileType) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_StartItemUpdate(self_ : * mut ISteamUGC, nConsumerAppId : AppId_t, nPublishedFileID : PublishedFileId_t) -> UGCUpdateHandle_t);
reexport!(fn SteamAPI_ISteamUGC_SetItemTitle(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pchTitle : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetItemDescription(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pchDescription : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetItemUpdateLanguage(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pchLanguage : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetItemMetadata(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pchMetaData : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetItemVisibility(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, eVisibility : ERemoteStoragePublishedFileVisibility) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetItemTags(self_ : * mut ISteamUGC, updateHandle : UGCUpdateHandle_t, pTags : * const SteamParamStringArray_t) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetItemContent(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pszContentFolder : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetItemPreview(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pszPreviewFile : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SetAllowLegacyUpload(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, bAllowLegacyUpload : bool) -> bool);
reexport!(fn SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t) -> bool);
reexport!(fn SteamAPI_ISteamUGC_RemoveItemKeyValueTags(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pchKey : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_AddItemKeyValueTag(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pchKey : * const :: std :: os :: raw :: c_char, pchValue : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_AddItemPreviewFile(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pszPreviewFile : * const :: std :: os :: raw :: c_char, type_ : EItemPreviewType) -> bool);
reexport!(fn SteamAPI_ISteamUGC_AddItemPreviewVideo(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pszVideoID : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_UpdateItemPreviewFile(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, index : uint32, pszPreviewFile : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_UpdateItemPreviewVideo(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, index : uint32, pszVideoID : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_RemoveItemPreview(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, index : uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SubmitItemUpdate(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, pchChangeNote : * const :: std :: os :: raw :: c_char) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_GetItemUpdateProgress(self_ : * mut ISteamUGC, handle : UGCUpdateHandle_t, punBytesProcessed : * mut uint64, punBytesTotal : * mut uint64) -> EItemUpdateStatus);
reexport!(fn SteamAPI_ISteamUGC_SetUserItemVote(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t, bVoteUp : bool) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_GetUserItemVote(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_AddItemToFavorites(self_ : * mut ISteamUGC, nAppId : AppId_t, nPublishedFileID : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_RemoveItemFromFavorites(self_ : * mut ISteamUGC, nAppId : AppId_t, nPublishedFileID : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_SubscribeItem(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_UnsubscribeItem(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_GetNumSubscribedItems(self_ : * mut ISteamUGC) -> uint32);
reexport!(fn SteamAPI_ISteamUGC_GetSubscribedItems(self_ : * mut ISteamUGC, pvecPublishedFileID : * mut PublishedFileId_t, cMaxEntries : uint32) -> uint32);
reexport!(fn SteamAPI_ISteamUGC_GetItemState(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t) -> uint32);
reexport!(fn SteamAPI_ISteamUGC_GetItemInstallInfo(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t, punSizeOnDisk : * mut uint64, pchFolder : * mut :: std :: os :: raw :: c_char, cchFolderSize : uint32, punTimeStamp : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetItemDownloadInfo(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t, punBytesDownloaded : * mut uint64, punBytesTotal : * mut uint64) -> bool);
reexport!(fn SteamAPI_ISteamUGC_DownloadItem(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t, bHighPriority : bool) -> bool);
reexport!(fn SteamAPI_ISteamUGC_BInitWorkshopForGameServer(self_ : * mut ISteamUGC, unWorkshopDepotID : DepotId_t, pszFolder : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamUGC_SuspendDownloads(self_ : * mut ISteamUGC, bSuspend : bool));
reexport!(fn SteamAPI_ISteamUGC_StartPlaytimeTracking(self_ : * mut ISteamUGC, pvecPublishedFileID : * mut PublishedFileId_t, unNumPublishedFileIDs : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_StopPlaytimeTracking(self_ : * mut ISteamUGC, pvecPublishedFileID : * mut PublishedFileId_t, unNumPublishedFileIDs : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(self_ : * mut ISteamUGC) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_AddDependency(self_ : * mut ISteamUGC, nParentPublishedFileID : PublishedFileId_t, nChildPublishedFileID : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_RemoveDependency(self_ : * mut ISteamUGC, nParentPublishedFileID : PublishedFileId_t, nChildPublishedFileID : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_AddAppDependency(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t, nAppID : AppId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_RemoveAppDependency(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t, nAppID : AppId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_GetAppDependencies(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_DeleteItem(self_ : * mut ISteamUGC, nPublishedFileID : PublishedFileId_t) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamUGC_ShowWorkshopEULA(self_ : * mut ISteamUGC) -> bool);
reexport!(fn SteamAPI_ISteamUGC_GetWorkshopEULAStatus(self_ : * mut ISteamUGC) -> SteamAPICall_t);
reexport!(fn SteamAPI_SteamAppList_v001() -> * mut ISteamAppList);
reexport!(fn SteamAPI_ISteamAppList_GetNumInstalledApps(self_ : * mut ISteamAppList) -> uint32);
reexport!(fn SteamAPI_ISteamAppList_GetInstalledApps(self_ : * mut ISteamAppList, pvecAppID : * mut AppId_t, unMaxAppIDs : uint32) -> uint32);
reexport!(fn SteamAPI_ISteamAppList_GetAppName(self_ : * mut ISteamAppList, nAppID : AppId_t, pchName : * mut :: std :: os :: raw :: c_char, cchNameMax : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamAppList_GetAppInstallDir(self_ : * mut ISteamAppList, nAppID : AppId_t, pchDirectory : * mut :: std :: os :: raw :: c_char, cchNameMax : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamAppList_GetAppBuildId(self_ : * mut ISteamAppList, nAppID : AppId_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_SteamHTMLSurface_v005() -> * mut ISteamHTMLSurface);
reexport!(fn SteamAPI_ISteamHTMLSurface_Init(self_ : * mut ISteamHTMLSurface) -> bool);
reexport!(fn SteamAPI_ISteamHTMLSurface_Shutdown(self_ : * mut ISteamHTMLSurface) -> bool);
reexport!(fn SteamAPI_ISteamHTMLSurface_CreateBrowser(self_ : * mut ISteamHTMLSurface, pchUserAgent : * const :: std :: os :: raw :: c_char, pchUserCSS : * const :: std :: os :: raw :: c_char) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamHTMLSurface_RemoveBrowser(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser));
reexport!(fn SteamAPI_ISteamHTMLSurface_LoadURL(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, pchURL : * const :: std :: os :: raw :: c_char, pchPostData : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamHTMLSurface_SetSize(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, unWidth : uint32, unHeight : uint32));
reexport!(fn SteamAPI_ISteamHTMLSurface_StopLoad(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser));
reexport!(fn SteamAPI_ISteamHTMLSurface_Reload(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser));
reexport!(fn SteamAPI_ISteamHTMLSurface_GoBack(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser));
reexport!(fn SteamAPI_ISteamHTMLSurface_GoForward(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser));
reexport!(fn SteamAPI_ISteamHTMLSurface_AddHeader(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, pchKey : * const :: std :: os :: raw :: c_char, pchValue : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamHTMLSurface_ExecuteJavascript(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, pchScript : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamHTMLSurface_MouseUp(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, eMouseButton : ISteamHTMLSurface_EHTMLMouseButton));
reexport!(fn SteamAPI_ISteamHTMLSurface_MouseDown(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, eMouseButton : ISteamHTMLSurface_EHTMLMouseButton));
reexport!(fn SteamAPI_ISteamHTMLSurface_MouseDoubleClick(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, eMouseButton : ISteamHTMLSurface_EHTMLMouseButton));
reexport!(fn SteamAPI_ISteamHTMLSurface_MouseMove(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, x : :: std :: os :: raw :: c_int, y : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamHTMLSurface_MouseWheel(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, nDelta : int32));
reexport!(fn SteamAPI_ISteamHTMLSurface_KeyDown(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, nNativeKeyCode : uint32, eHTMLKeyModifiers : ISteamHTMLSurface_EHTMLKeyModifiers, bIsSystemKey : bool));
reexport!(fn SteamAPI_ISteamHTMLSurface_KeyUp(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, nNativeKeyCode : uint32, eHTMLKeyModifiers : ISteamHTMLSurface_EHTMLKeyModifiers));
reexport!(fn SteamAPI_ISteamHTMLSurface_KeyChar(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, cUnicodeChar : uint32, eHTMLKeyModifiers : ISteamHTMLSurface_EHTMLKeyModifiers));
reexport!(fn SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, nAbsolutePixelScroll : uint32));
reexport!(fn SteamAPI_ISteamHTMLSurface_SetVerticalScroll(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, nAbsolutePixelScroll : uint32));
reexport!(fn SteamAPI_ISteamHTMLSurface_SetKeyFocus(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, bHasKeyFocus : bool));
reexport!(fn SteamAPI_ISteamHTMLSurface_ViewSource(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser));
reexport!(fn SteamAPI_ISteamHTMLSurface_CopyToClipboard(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser));
reexport!(fn SteamAPI_ISteamHTMLSurface_PasteFromClipboard(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser));
reexport!(fn SteamAPI_ISteamHTMLSurface_Find(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, pchSearchStr : * const :: std :: os :: raw :: c_char, bCurrentlyInFind : bool, bReverse : bool));
reexport!(fn SteamAPI_ISteamHTMLSurface_StopFind(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser));
reexport!(fn SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, x : :: std :: os :: raw :: c_int, y : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamHTMLSurface_SetCookie(self_ : * mut ISteamHTMLSurface, pchHostname : * const :: std :: os :: raw :: c_char, pchKey : * const :: std :: os :: raw :: c_char, pchValue : * const :: std :: os :: raw :: c_char, pchPath : * const :: std :: os :: raw :: c_char, nExpires : RTime32, bSecure : bool, bHTTPOnly : bool));
reexport!(fn SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, flZoom : f32, nPointX : :: std :: os :: raw :: c_int, nPointY : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamHTMLSurface_SetBackgroundMode(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, bBackgroundMode : bool));
reexport!(fn SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, flDPIScaling : f32));
reexport!(fn SteamAPI_ISteamHTMLSurface_OpenDeveloperTools(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser));
reexport!(fn SteamAPI_ISteamHTMLSurface_AllowStartRequest(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, bAllowed : bool));
reexport!(fn SteamAPI_ISteamHTMLSurface_JSDialogResponse(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, bResult : bool));
reexport!(fn SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse(self_ : * mut ISteamHTMLSurface, unBrowserHandle : HHTMLBrowser, pchSelectedFiles : * mut * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_SteamInventory_v003() -> * mut ISteamInventory);
reexport!(fn SteamAPI_SteamGameServerInventory_v003() -> * mut ISteamInventory);
reexport!(fn SteamAPI_ISteamInventory_GetResultStatus(self_ : * mut ISteamInventory, resultHandle : SteamInventoryResult_t) -> EResult);
reexport!(fn SteamAPI_ISteamInventory_GetResultItems(self_ : * mut ISteamInventory, resultHandle : SteamInventoryResult_t, pOutItemsArray : * mut SteamItemDetails_t, punOutItemsArraySize : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_GetResultItemProperty(self_ : * mut ISteamInventory, resultHandle : SteamInventoryResult_t, unItemIndex : uint32, pchPropertyName : * const :: std :: os :: raw :: c_char, pchValueBuffer : * mut :: std :: os :: raw :: c_char, punValueBufferSizeOut : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_GetResultTimestamp(self_ : * mut ISteamInventory, resultHandle : SteamInventoryResult_t) -> uint32);
reexport!(fn SteamAPI_ISteamInventory_CheckResultSteamID(self_ : * mut ISteamInventory, resultHandle : SteamInventoryResult_t, steamIDExpected : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamInventory_DestroyResult(self_ : * mut ISteamInventory, resultHandle : SteamInventoryResult_t));
reexport!(fn SteamAPI_ISteamInventory_GetAllItems(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t) -> bool);
reexport!(fn SteamAPI_ISteamInventory_GetItemsByID(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t, pInstanceIDs : * const SteamItemInstanceID_t, unCountInstanceIDs : uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_SerializeResult(self_ : * mut ISteamInventory, resultHandle : SteamInventoryResult_t, pOutBuffer : * mut :: std :: os :: raw :: c_void, punOutBufferSize : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_DeserializeResult(self_ : * mut ISteamInventory, pOutResultHandle : * mut SteamInventoryResult_t, pBuffer : * const :: std :: os :: raw :: c_void, unBufferSize : uint32, bRESERVED_MUST_BE_FALSE : bool) -> bool);
reexport!(fn SteamAPI_ISteamInventory_GenerateItems(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t, pArrayItemDefs : * const SteamItemDef_t, punArrayQuantity : * const uint32, unArrayLength : uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_GrantPromoItems(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t) -> bool);
reexport!(fn SteamAPI_ISteamInventory_AddPromoItem(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t, itemDef : SteamItemDef_t) -> bool);
reexport!(fn SteamAPI_ISteamInventory_AddPromoItems(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t, pArrayItemDefs : * const SteamItemDef_t, unArrayLength : uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_ConsumeItem(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t, itemConsume : SteamItemInstanceID_t, unQuantity : uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_ExchangeItems(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t, pArrayGenerate : * const SteamItemDef_t, punArrayGenerateQuantity : * const uint32, unArrayGenerateLength : uint32, pArrayDestroy : * const SteamItemInstanceID_t, punArrayDestroyQuantity : * const uint32, unArrayDestroyLength : uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_TransferItemQuantity(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t, itemIdSource : SteamItemInstanceID_t, unQuantity : uint32, itemIdDest : SteamItemInstanceID_t) -> bool);
reexport!(fn SteamAPI_ISteamInventory_SendItemDropHeartbeat(self_ : * mut ISteamInventory));
reexport!(fn SteamAPI_ISteamInventory_TriggerItemDrop(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t, dropListDefinition : SteamItemDef_t) -> bool);
reexport!(fn SteamAPI_ISteamInventory_TradeItems(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t, steamIDTradePartner : uint64_steamid, pArrayGive : * const SteamItemInstanceID_t, pArrayGiveQuantity : * const uint32, nArrayGiveLength : uint32, pArrayGet : * const SteamItemInstanceID_t, pArrayGetQuantity : * const uint32, nArrayGetLength : uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_LoadItemDefinitions(self_ : * mut ISteamInventory) -> bool);
reexport!(fn SteamAPI_ISteamInventory_GetItemDefinitionIDs(self_ : * mut ISteamInventory, pItemDefIDs : * mut SteamItemDef_t, punItemDefIDsArraySize : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_GetItemDefinitionProperty(self_ : * mut ISteamInventory, iDefinition : SteamItemDef_t, pchPropertyName : * const :: std :: os :: raw :: c_char, pchValueBuffer : * mut :: std :: os :: raw :: c_char, punValueBufferSizeOut : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(self_ : * mut ISteamInventory, steamID : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(self_ : * mut ISteamInventory, steamID : uint64_steamid, pItemDefIDs : * mut SteamItemDef_t, punItemDefIDsArraySize : * mut uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_StartPurchase(self_ : * mut ISteamInventory, pArrayItemDefs : * const SteamItemDef_t, punArrayQuantity : * const uint32, unArrayLength : uint32) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamInventory_RequestPrices(self_ : * mut ISteamInventory) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamInventory_GetNumItemsWithPrices(self_ : * mut ISteamInventory) -> uint32);
reexport!(fn SteamAPI_ISteamInventory_GetItemsWithPrices(self_ : * mut ISteamInventory, pArrayItemDefs : * mut SteamItemDef_t, pCurrentPrices : * mut uint64, pBasePrices : * mut uint64, unArrayLength : uint32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_GetItemPrice(self_ : * mut ISteamInventory, iDefinition : SteamItemDef_t, pCurrentPrice : * mut uint64, pBasePrice : * mut uint64) -> bool);
reexport!(fn SteamAPI_ISteamInventory_StartUpdateProperties(self_ : * mut ISteamInventory) -> SteamInventoryUpdateHandle_t);
reexport!(fn SteamAPI_ISteamInventory_RemoveProperty(self_ : * mut ISteamInventory, handle : SteamInventoryUpdateHandle_t, nItemID : SteamItemInstanceID_t, pchPropertyName : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamInventory_SetPropertyString(self_ : * mut ISteamInventory, handle : SteamInventoryUpdateHandle_t, nItemID : SteamItemInstanceID_t, pchPropertyName : * const :: std :: os :: raw :: c_char, pchPropertyValue : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamInventory_SetPropertyBool(self_ : * mut ISteamInventory, handle : SteamInventoryUpdateHandle_t, nItemID : SteamItemInstanceID_t, pchPropertyName : * const :: std :: os :: raw :: c_char, bValue : bool) -> bool);
reexport!(fn SteamAPI_ISteamInventory_SetPropertyInt64(self_ : * mut ISteamInventory, handle : SteamInventoryUpdateHandle_t, nItemID : SteamItemInstanceID_t, pchPropertyName : * const :: std :: os :: raw :: c_char, nValue : int64) -> bool);
reexport!(fn SteamAPI_ISteamInventory_SetPropertyFloat(self_ : * mut ISteamInventory, handle : SteamInventoryUpdateHandle_t, nItemID : SteamItemInstanceID_t, pchPropertyName : * const :: std :: os :: raw :: c_char, flValue : f32) -> bool);
reexport!(fn SteamAPI_ISteamInventory_SubmitUpdateProperties(self_ : * mut ISteamInventory, handle : SteamInventoryUpdateHandle_t, pResultHandle : * mut SteamInventoryResult_t) -> bool);
reexport!(fn SteamAPI_ISteamInventory_InspectItem(self_ : * mut ISteamInventory, pResultHandle : * mut SteamInventoryResult_t, pchItemToken : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_SteamVideo_v002() -> * mut ISteamVideo);
reexport!(fn SteamAPI_ISteamVideo_GetVideoURL(self_ : * mut ISteamVideo, unVideoAppID : AppId_t));
reexport!(fn SteamAPI_ISteamVideo_IsBroadcasting(self_ : * mut ISteamVideo, pnNumViewers : * mut :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamVideo_GetOPFSettings(self_ : * mut ISteamVideo, unVideoAppID : AppId_t));
reexport!(fn SteamAPI_ISteamVideo_GetOPFStringForApp(self_ : * mut ISteamVideo, unVideoAppID : AppId_t, pchBuffer : * mut :: std :: os :: raw :: c_char, pnBufferSize : * mut int32) -> bool);
reexport!(fn SteamAPI_SteamParentalSettings_v001() -> * mut ISteamParentalSettings);
reexport!(fn SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(self_ : * mut ISteamParentalSettings) -> bool);
reexport!(fn SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(self_ : * mut ISteamParentalSettings) -> bool);
reexport!(fn SteamAPI_ISteamParentalSettings_BIsAppBlocked(self_ : * mut ISteamParentalSettings, nAppID : AppId_t) -> bool);
reexport!(fn SteamAPI_ISteamParentalSettings_BIsAppInBlockList(self_ : * mut ISteamParentalSettings, nAppID : AppId_t) -> bool);
reexport!(fn SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(self_ : * mut ISteamParentalSettings, eFeature : EParentalFeature) -> bool);
reexport!(fn SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(self_ : * mut ISteamParentalSettings, eFeature : EParentalFeature) -> bool);
reexport!(fn SteamAPI_SteamRemotePlay_v001() -> * mut ISteamRemotePlay);
reexport!(fn SteamAPI_ISteamRemotePlay_GetSessionCount(self_ : * mut ISteamRemotePlay) -> uint32);
reexport!(fn SteamAPI_ISteamRemotePlay_GetSessionID(self_ : * mut ISteamRemotePlay, iSessionIndex : :: std :: os :: raw :: c_int) -> RemotePlaySessionID_t);
reexport!(fn SteamAPI_ISteamRemotePlay_GetSessionSteamID(self_ : * mut ISteamRemotePlay, unSessionID : RemotePlaySessionID_t) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamRemotePlay_GetSessionClientName(self_ : * mut ISteamRemotePlay, unSessionID : RemotePlaySessionID_t) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor(self_ : * mut ISteamRemotePlay, unSessionID : RemotePlaySessionID_t) -> ESteamDeviceFormFactor);
reexport!(fn SteamAPI_ISteamRemotePlay_BGetSessionClientResolution(self_ : * mut ISteamRemotePlay, unSessionID : RemotePlaySessionID_t, pnResolutionX : * mut :: std :: os :: raw :: c_int, pnResolutionY : * mut :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(self_ : * mut ISteamRemotePlay, steamIDFriend : uint64_steamid) -> bool);
reexport!(fn SteamAPI_SteamNetworkingMessages_SteamAPI_v002() -> * mut ISteamNetworkingMessages);
reexport!(fn SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002() -> * mut ISteamNetworkingMessages);
reexport!(fn SteamAPI_ISteamNetworkingMessages_SendMessageToUser(self_ : * mut ISteamNetworkingMessages, identityRemote : * const SteamNetworkingIdentity, pubData : * const :: std :: os :: raw :: c_void, cubData : uint32, nSendFlags : :: std :: os :: raw :: c_int, nRemoteChannel : :: std :: os :: raw :: c_int) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingMessages_ReceiveMessagesOnChannel(self_ : * mut ISteamNetworkingMessages, nLocalChannel : :: std :: os :: raw :: c_int, ppOutMessages : * mut * mut SteamNetworkingMessage_t, nMaxMessages : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingMessages_AcceptSessionWithUser(self_ : * mut ISteamNetworkingMessages, identityRemote : * const SteamNetworkingIdentity) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingMessages_CloseSessionWithUser(self_ : * mut ISteamNetworkingMessages, identityRemote : * const SteamNetworkingIdentity) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingMessages_CloseChannelWithUser(self_ : * mut ISteamNetworkingMessages, identityRemote : * const SteamNetworkingIdentity, nLocalChannel : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingMessages_GetSessionConnectionInfo(self_ : * mut ISteamNetworkingMessages, identityRemote : * const SteamNetworkingIdentity, pConnectionInfo : * mut SteamNetConnectionInfo_t, pQuickStatus : * mut SteamNetConnectionRealTimeStatus_t) -> ESteamNetworkingConnectionState);
reexport!(fn SteamAPI_SteamNetworkingSockets_SteamAPI_v012() -> * mut ISteamNetworkingSockets);
reexport!(fn SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012() -> * mut ISteamNetworkingSockets);
reexport!(fn SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(self_ : * mut ISteamNetworkingSockets, localAddress : * const SteamNetworkingIPAddr, nOptions : :: std :: os :: raw :: c_int, pOptions : * const SteamNetworkingConfigValue_t) -> HSteamListenSocket);
reexport!(fn SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(self_ : * mut ISteamNetworkingSockets, address : * const SteamNetworkingIPAddr, nOptions : :: std :: os :: raw :: c_int, pOptions : * const SteamNetworkingConfigValue_t) -> HSteamNetConnection);
reexport!(fn SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(self_ : * mut ISteamNetworkingSockets, nLocalVirtualPort : :: std :: os :: raw :: c_int, nOptions : :: std :: os :: raw :: c_int, pOptions : * const SteamNetworkingConfigValue_t) -> HSteamListenSocket);
reexport!(fn SteamAPI_ISteamNetworkingSockets_ConnectP2P(self_ : * mut ISteamNetworkingSockets, identityRemote : * const SteamNetworkingIdentity, nRemoteVirtualPort : :: std :: os :: raw :: c_int, nOptions : :: std :: os :: raw :: c_int, pOptions : * const SteamNetworkingConfigValue_t) -> HSteamNetConnection);
reexport!(fn SteamAPI_ISteamNetworkingSockets_AcceptConnection(self_ : * mut ISteamNetworkingSockets, hConn : HSteamNetConnection) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingSockets_CloseConnection(self_ : * mut ISteamNetworkingSockets, hPeer : HSteamNetConnection, nReason : :: std :: os :: raw :: c_int, pszDebug : * const :: std :: os :: raw :: c_char, bEnableLinger : bool) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_CloseListenSocket(self_ : * mut ISteamNetworkingSockets, hSocket : HSteamListenSocket) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(self_ : * mut ISteamNetworkingSockets, hPeer : HSteamNetConnection, nUserData : int64) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(self_ : * mut ISteamNetworkingSockets, hPeer : HSteamNetConnection) -> int64);
reexport!(fn SteamAPI_ISteamNetworkingSockets_SetConnectionName(self_ : * mut ISteamNetworkingSockets, hPeer : HSteamNetConnection, pszName : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetConnectionName(self_ : * mut ISteamNetworkingSockets, hPeer : HSteamNetConnection, pszName : * mut :: std :: os :: raw :: c_char, nMaxLen : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_SendMessageToConnection(self_ : * mut ISteamNetworkingSockets, hConn : HSteamNetConnection, pData : * const :: std :: os :: raw :: c_void, cbData : uint32, nSendFlags : :: std :: os :: raw :: c_int, pOutMessageNumber : * mut int64) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingSockets_SendMessages(self_ : * mut ISteamNetworkingSockets, nMessages : :: std :: os :: raw :: c_int, pMessages : * const * mut SteamNetworkingMessage_t, pOutMessageNumberOrResult : * mut int64));
reexport!(fn SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(self_ : * mut ISteamNetworkingSockets, hConn : HSteamNetConnection) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(self_ : * mut ISteamNetworkingSockets, hConn : HSteamNetConnection, ppOutMessages : * mut * mut SteamNetworkingMessage_t, nMaxMessages : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetConnectionInfo(self_ : * mut ISteamNetworkingSockets, hConn : HSteamNetConnection, pInfo : * mut SteamNetConnectionInfo_t) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetConnectionRealTimeStatus(self_ : * mut ISteamNetworkingSockets, hConn : HSteamNetConnection, pStatus : * mut SteamNetConnectionRealTimeStatus_t, nLanes : :: std :: os :: raw :: c_int, pLanes : * mut SteamNetConnectionRealTimeLaneStatus_t) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(self_ : * mut ISteamNetworkingSockets, hConn : HSteamNetConnection, pszBuf : * mut :: std :: os :: raw :: c_char, cbBuf : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(self_ : * mut ISteamNetworkingSockets, hSocket : HSteamListenSocket, address : * mut SteamNetworkingIPAddr) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_CreateSocketPair(self_ : * mut ISteamNetworkingSockets, pOutConnection1 : * mut HSteamNetConnection, pOutConnection2 : * mut HSteamNetConnection, bUseNetworkLoopback : bool, pIdentity1 : * const SteamNetworkingIdentity, pIdentity2 : * const SteamNetworkingIdentity) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_ConfigureConnectionLanes(self_ : * mut ISteamNetworkingSockets, hConn : HSteamNetConnection, nNumLanes : :: std :: os :: raw :: c_int, pLanePriorities : * const :: std :: os :: raw :: c_int, pLaneWeights : * const uint16) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetIdentity(self_ : * mut ISteamNetworkingSockets, pIdentity : * mut SteamNetworkingIdentity) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_InitAuthentication(self_ : * mut ISteamNetworkingSockets) -> ESteamNetworkingAvailability);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(self_ : * mut ISteamNetworkingSockets, pDetails : * mut SteamNetAuthenticationStatus_t) -> ESteamNetworkingAvailability);
reexport!(fn SteamAPI_ISteamNetworkingSockets_CreatePollGroup(self_ : * mut ISteamNetworkingSockets) -> HSteamNetPollGroup);
reexport!(fn SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(self_ : * mut ISteamNetworkingSockets, hPollGroup : HSteamNetPollGroup) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(self_ : * mut ISteamNetworkingSockets, hConn : HSteamNetConnection, hPollGroup : HSteamNetPollGroup) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(self_ : * mut ISteamNetworkingSockets, hPollGroup : HSteamNetPollGroup, ppOutMessages : * mut * mut SteamNetworkingMessage_t, nMaxMessages : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingSockets_ReceivedRelayAuthTicket(self_ : * mut ISteamNetworkingSockets, pvTicket : * const :: std :: os :: raw :: c_void, cbTicket : :: std :: os :: raw :: c_int, pOutParsedTicket : * mut SteamDatagramRelayAuthTicket) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer(self_ : * mut ISteamNetworkingSockets, identityGameServer : * const SteamNetworkingIdentity, nRemoteVirtualPort : :: std :: os :: raw :: c_int, pOutParsedTicket : * mut SteamDatagramRelayAuthTicket) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(self_ : * mut ISteamNetworkingSockets, identityTarget : * const SteamNetworkingIdentity, nRemoteVirtualPort : :: std :: os :: raw :: c_int, nOptions : :: std :: os :: raw :: c_int, pOptions : * const SteamNetworkingConfigValue_t) -> HSteamNetConnection);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort(self_ : * mut ISteamNetworkingSockets) -> uint16);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(self_ : * mut ISteamNetworkingSockets) -> SteamNetworkingPOPID);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(self_ : * mut ISteamNetworkingSockets, pRouting : * mut SteamDatagramHostedAddress) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(self_ : * mut ISteamNetworkingSockets, nLocalVirtualPort : :: std :: os :: raw :: c_int, nOptions : :: std :: os :: raw :: c_int, pOptions : * const SteamNetworkingConfigValue_t) -> HSteamListenSocket);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(self_ : * mut ISteamNetworkingSockets, pLoginInfo : * mut SteamDatagramGameCoordinatorServerLogin, pcbSignedBlob : * mut :: std :: os :: raw :: c_int, pBlob : * mut :: std :: os :: raw :: c_void) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingSockets_ConnectP2PCustomSignaling(self_ : * mut ISteamNetworkingSockets, pSignaling : * mut ISteamNetworkingConnectionSignaling, pPeerIdentity : * const SteamNetworkingIdentity, nRemoteVirtualPort : :: std :: os :: raw :: c_int, nOptions : :: std :: os :: raw :: c_int, pOptions : * const SteamNetworkingConfigValue_t) -> HSteamNetConnection);
reexport!(fn SteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal(self_ : * mut ISteamNetworkingSockets, pMsg : * const :: std :: os :: raw :: c_void, cbMsg : :: std :: os :: raw :: c_int, pContext : * mut ISteamNetworkingSignalingRecvContext) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetCertificateRequest(self_ : * mut ISteamNetworkingSockets, pcbBlob : * mut :: std :: os :: raw :: c_int, pBlob : * mut :: std :: os :: raw :: c_void, errMsg : * mut SteamNetworkingErrMsg) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_SetCertificate(self_ : * mut ISteamNetworkingSockets, pCertificate : * const :: std :: os :: raw :: c_void, cbCertificate : :: std :: os :: raw :: c_int, errMsg : * mut SteamNetworkingErrMsg) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_ResetIdentity(self_ : * mut ISteamNetworkingSockets, pIdentity : * const SteamNetworkingIdentity));
reexport!(fn SteamAPI_ISteamNetworkingSockets_RunCallbacks(self_ : * mut ISteamNetworkingSockets));
reexport!(fn SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP(self_ : * mut ISteamNetworkingSockets, nNumPorts : :: std :: os :: raw :: c_int) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetFakeIP(self_ : * mut ISteamNetworkingSockets, idxFirstPort : :: std :: os :: raw :: c_int, pInfo : * mut SteamNetworkingFakeIPResult_t));
reexport!(fn SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2PFakeIP(self_ : * mut ISteamNetworkingSockets, idxFakePort : :: std :: os :: raw :: c_int, nOptions : :: std :: os :: raw :: c_int, pOptions : * const SteamNetworkingConfigValue_t) -> HSteamListenSocket);
reexport!(fn SteamAPI_ISteamNetworkingSockets_GetRemoteFakeIPForConnection(self_ : * mut ISteamNetworkingSockets, hConn : HSteamNetConnection, pOutAddr : * mut SteamNetworkingIPAddr) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingSockets_CreateFakeUDPPort(self_ : * mut ISteamNetworkingSockets, idxFakeServerPort : :: std :: os :: raw :: c_int) -> * mut ISteamNetworkingFakeUDPPort);
reexport!(fn SteamAPI_SteamNetworkingUtils_SteamAPI_v004() -> * mut ISteamNetworkingUtils);
reexport!(fn SteamAPI_ISteamNetworkingUtils_AllocateMessage(self_ : * mut ISteamNetworkingUtils, cbAllocateBuffer : :: std :: os :: raw :: c_int) -> * mut SteamNetworkingMessage_t);
reexport!(fn SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess(self_ : * mut ISteamNetworkingUtils));
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(self_ : * mut ISteamNetworkingUtils, pDetails : * mut SteamRelayNetworkStatus_t) -> ESteamNetworkingAvailability);
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(self_ : * mut ISteamNetworkingUtils, result : * mut SteamNetworkPingLocation_t) -> f32);
reexport!(fn SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(self_ : * mut ISteamNetworkingUtils, location1 : * const SteamNetworkPingLocation_t, location2 : * const SteamNetworkPingLocation_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(self_ : * mut ISteamNetworkingUtils, remoteLocation : * const SteamNetworkPingLocation_t) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(self_ : * mut ISteamNetworkingUtils, location : * const SteamNetworkPingLocation_t, pszBuf : * mut :: std :: os :: raw :: c_char, cchBufSize : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamNetworkingUtils_ParsePingLocationString(self_ : * mut ISteamNetworkingUtils, pszString : * const :: std :: os :: raw :: c_char, result : * mut SteamNetworkPingLocation_t) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(self_ : * mut ISteamNetworkingUtils, flMaxAgeSeconds : f32) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(self_ : * mut ISteamNetworkingUtils, popID : SteamNetworkingPOPID, pViaRelayPoP : * mut SteamNetworkingPOPID) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(self_ : * mut ISteamNetworkingUtils, popID : SteamNetworkingPOPID) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetPOPCount(self_ : * mut ISteamNetworkingUtils) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetPOPList(self_ : * mut ISteamNetworkingUtils, list : * mut SteamNetworkingPOPID, nListSz : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp(self_ : * mut ISteamNetworkingUtils) -> SteamNetworkingMicroseconds);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(self_ : * mut ISteamNetworkingUtils, eDetailLevel : ESteamNetworkingSocketsDebugOutputType, pfnFunc : FSteamNetworkingSocketsDebugOutput));
reexport!(fn SteamAPI_ISteamNetworkingUtils_IsFakeIPv4(self_ : * mut ISteamNetworkingUtils, nIPv4 : uint32) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetIPv4FakeIPType(self_ : * mut ISteamNetworkingUtils, nIPv4 : uint32) -> ESteamNetworkingFakeIPType);
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetRealIdentityForFakeIP(self_ : * mut ISteamNetworkingUtils, fakeIP : * const SteamNetworkingIPAddr, pOutRealIdentity : * mut SteamNetworkingIdentity) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(self_ : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, val : int32) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(self_ : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, val : f32) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(self_ : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, val : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr(self_ : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, val : * mut :: std :: os :: raw :: c_void) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(self_ : * mut ISteamNetworkingUtils, hConn : HSteamNetConnection, eValue : ESteamNetworkingConfigValue, val : int32) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(self_ : * mut ISteamNetworkingUtils, hConn : HSteamNetConnection, eValue : ESteamNetworkingConfigValue, val : f32) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(self_ : * mut ISteamNetworkingUtils, hConn : HSteamNetConnection, eValue : ESteamNetworkingConfigValue, val : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(self_ : * mut ISteamNetworkingUtils, fnCallback : FnSteamNetConnectionStatusChanged) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(self_ : * mut ISteamNetworkingUtils, fnCallback : FnSteamNetAuthenticationStatusChanged) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(self_ : * mut ISteamNetworkingUtils, fnCallback : FnSteamRelayNetworkStatusChanged) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_FakeIPResult(self_ : * mut ISteamNetworkingUtils, fnCallback : FnSteamNetworkingFakeIPResult) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionRequest(self_ : * mut ISteamNetworkingUtils, fnCallback : FnSteamNetworkingMessagesSessionRequest) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_MessagesSessionFailed(self_ : * mut ISteamNetworkingUtils, fnCallback : FnSteamNetworkingMessagesSessionFailed) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetConfigValue(self_ : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, eScopeType : ESteamNetworkingConfigScope, scopeObj : isize, eDataType : ESteamNetworkingConfigDataType, pArg : * const :: std :: os :: raw :: c_void) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(self_ : * mut ISteamNetworkingUtils, opt : * const SteamNetworkingConfigValue_t, eScopeType : ESteamNetworkingConfigScope, scopeObj : isize) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetConfigValue(self_ : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, eScopeType : ESteamNetworkingConfigScope, scopeObj : isize, pOutDataType : * mut ESteamNetworkingConfigDataType, pResult : * mut :: std :: os :: raw :: c_void, cbResult : * mut size_t) -> ESteamNetworkingGetConfigValueResult);
reexport!(fn SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(self_ : * mut ISteamNetworkingUtils, eValue : ESteamNetworkingConfigValue, pOutDataType : * mut ESteamNetworkingConfigDataType, pOutScope : * mut ESteamNetworkingConfigScope) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues(self_ : * mut ISteamNetworkingUtils, eCurrent : ESteamNetworkingConfigValue, bEnumerateDevVars : bool) -> ESteamNetworkingConfigValue);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString(self_ : * mut ISteamNetworkingUtils, addr : * const SteamNetworkingIPAddr, buf : * mut :: std :: os :: raw :: c_char, cbBuf : uint32, bWithPort : bool));
reexport!(fn SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString(self_ : * mut ISteamNetworkingUtils, pAddr : * mut SteamNetworkingIPAddr, pszStr : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_GetFakeIPType(self_ : * mut ISteamNetworkingUtils, addr : * const SteamNetworkingIPAddr) -> ESteamNetworkingFakeIPType);
reexport!(fn SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString(self_ : * mut ISteamNetworkingUtils, identity : * const SteamNetworkingIdentity, buf : * mut :: std :: os :: raw :: c_char, cbBuf : uint32));
reexport!(fn SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString(self_ : * mut ISteamNetworkingUtils, pIdentity : * mut SteamNetworkingIdentity, pszStr : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_SteamGameServer_v014() -> * mut ISteamGameServer);
reexport!(fn SteamAPI_ISteamGameServer_SetProduct(self_ : * mut ISteamGameServer, pszProduct : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_SetGameDescription(self_ : * mut ISteamGameServer, pszGameDescription : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_SetModDir(self_ : * mut ISteamGameServer, pszModDir : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_SetDedicatedServer(self_ : * mut ISteamGameServer, bDedicated : bool));
reexport!(fn SteamAPI_ISteamGameServer_LogOn(self_ : * mut ISteamGameServer, pszToken : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_LogOnAnonymous(self_ : * mut ISteamGameServer));
reexport!(fn SteamAPI_ISteamGameServer_LogOff(self_ : * mut ISteamGameServer));
reexport!(fn SteamAPI_ISteamGameServer_BLoggedOn(self_ : * mut ISteamGameServer) -> bool);
reexport!(fn SteamAPI_ISteamGameServer_BSecure(self_ : * mut ISteamGameServer) -> bool);
reexport!(fn SteamAPI_ISteamGameServer_GetSteamID(self_ : * mut ISteamGameServer) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamGameServer_WasRestartRequested(self_ : * mut ISteamGameServer) -> bool);
reexport!(fn SteamAPI_ISteamGameServer_SetMaxPlayerCount(self_ : * mut ISteamGameServer, cPlayersMax : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamGameServer_SetBotPlayerCount(self_ : * mut ISteamGameServer, cBotplayers : :: std :: os :: raw :: c_int));
reexport!(fn SteamAPI_ISteamGameServer_SetServerName(self_ : * mut ISteamGameServer, pszServerName : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_SetMapName(self_ : * mut ISteamGameServer, pszMapName : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_SetPasswordProtected(self_ : * mut ISteamGameServer, bPasswordProtected : bool));
reexport!(fn SteamAPI_ISteamGameServer_SetSpectatorPort(self_ : * mut ISteamGameServer, unSpectatorPort : uint16));
reexport!(fn SteamAPI_ISteamGameServer_SetSpectatorServerName(self_ : * mut ISteamGameServer, pszSpectatorServerName : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_ClearAllKeyValues(self_ : * mut ISteamGameServer));
reexport!(fn SteamAPI_ISteamGameServer_SetKeyValue(self_ : * mut ISteamGameServer, pKey : * const :: std :: os :: raw :: c_char, pValue : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_SetGameTags(self_ : * mut ISteamGameServer, pchGameTags : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_SetGameData(self_ : * mut ISteamGameServer, pchGameData : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_SetRegion(self_ : * mut ISteamGameServer, pszRegion : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_ISteamGameServer_SetAdvertiseServerActive(self_ : * mut ISteamGameServer, bActive : bool));
reexport!(fn SteamAPI_ISteamGameServer_GetAuthSessionTicket(self_ : * mut ISteamGameServer, pTicket : * mut :: std :: os :: raw :: c_void, cbMaxTicket : :: std :: os :: raw :: c_int, pcbTicket : * mut uint32) -> HAuthTicket);
reexport!(fn SteamAPI_ISteamGameServer_BeginAuthSession(self_ : * mut ISteamGameServer, pAuthTicket : * const :: std :: os :: raw :: c_void, cbAuthTicket : :: std :: os :: raw :: c_int, steamID : uint64_steamid) -> EBeginAuthSessionResult);
reexport!(fn SteamAPI_ISteamGameServer_EndAuthSession(self_ : * mut ISteamGameServer, steamID : uint64_steamid));
reexport!(fn SteamAPI_ISteamGameServer_CancelAuthTicket(self_ : * mut ISteamGameServer, hAuthTicket : HAuthTicket));
reexport!(fn SteamAPI_ISteamGameServer_UserHasLicenseForApp(self_ : * mut ISteamGameServer, steamID : uint64_steamid, appID : AppId_t) -> EUserHasLicenseForAppResult);
reexport!(fn SteamAPI_ISteamGameServer_RequestUserGroupStatus(self_ : * mut ISteamGameServer, steamIDUser : uint64_steamid, steamIDGroup : uint64_steamid) -> bool);
reexport!(fn SteamAPI_ISteamGameServer_GetGameplayStats(self_ : * mut ISteamGameServer));
reexport!(fn SteamAPI_ISteamGameServer_GetServerReputation(self_ : * mut ISteamGameServer) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamGameServer_GetPublicIP(self_ : * mut ISteamGameServer) -> SteamIPAddress_t);
reexport!(fn SteamAPI_ISteamGameServer_HandleIncomingPacket(self_ : * mut ISteamGameServer, pData : * const :: std :: os :: raw :: c_void, cbData : :: std :: os :: raw :: c_int, srcIP : uint32, srcPort : uint16) -> bool);
reexport!(fn SteamAPI_ISteamGameServer_GetNextOutgoingPacket(self_ : * mut ISteamGameServer, pOut : * mut :: std :: os :: raw :: c_void, cbMaxOut : :: std :: os :: raw :: c_int, pNetAdr : * mut uint32, pPort : * mut uint16) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamGameServer_AssociateWithClan(self_ : * mut ISteamGameServer, steamIDClan : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(self_ : * mut ISteamGameServer, steamIDNewPlayer : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate_DEPRECATED(self_ : * mut ISteamGameServer, unIPClient : uint32, pvAuthBlob : * const :: std :: os :: raw :: c_void, cubAuthBlobSize : uint32, pSteamIDUser : * mut CSteamID) -> bool);
reexport!(fn SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(self_ : * mut ISteamGameServer) -> uint64_steamid);
reexport!(fn SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED(self_ : * mut ISteamGameServer, steamIDUser : uint64_steamid));
reexport!(fn SteamAPI_ISteamGameServer_BUpdateUserData(self_ : * mut ISteamGameServer, steamIDUser : uint64_steamid, pchPlayerName : * const :: std :: os :: raw :: c_char, uScore : uint32) -> bool);
reexport!(fn SteamAPI_SteamGameServerStats_v001() -> * mut ISteamGameServerStats);
reexport!(fn SteamAPI_ISteamGameServerStats_RequestUserStats(self_ : * mut ISteamGameServerStats, steamIDUser : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamGameServerStats_GetUserStatInt32(self_ : * mut ISteamGameServerStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char, pData : * mut int32) -> bool);
reexport!(fn SteamAPI_ISteamGameServerStats_GetUserStatFloat(self_ : * mut ISteamGameServerStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char, pData : * mut f32) -> bool);
reexport!(fn SteamAPI_ISteamGameServerStats_GetUserAchievement(self_ : * mut ISteamGameServerStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char, pbAchieved : * mut bool) -> bool);
reexport!(fn SteamAPI_ISteamGameServerStats_SetUserStatInt32(self_ : * mut ISteamGameServerStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char, nData : int32) -> bool);
reexport!(fn SteamAPI_ISteamGameServerStats_SetUserStatFloat(self_ : * mut ISteamGameServerStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char, fData : f32) -> bool);
reexport!(fn SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(self_ : * mut ISteamGameServerStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char, flCountThisSession : f32, dSessionLength : f64) -> bool);
reexport!(fn SteamAPI_ISteamGameServerStats_SetUserAchievement(self_ : * mut ISteamGameServerStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamGameServerStats_ClearUserAchievement(self_ : * mut ISteamGameServerStats, steamIDUser : uint64_steamid, pchName : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_ISteamGameServerStats_StoreUserStats(self_ : * mut ISteamGameServerStats, steamIDUser : uint64_steamid) -> SteamAPICall_t);
reexport!(fn SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort(self_ : * mut ISteamNetworkingFakeUDPPort));
reexport!(fn SteamAPI_ISteamNetworkingFakeUDPPort_SendMessageToFakeIP(self_ : * mut ISteamNetworkingFakeUDPPort, remoteAddress : * const SteamNetworkingIPAddr, pData : * const :: std :: os :: raw :: c_void, cbData : uint32, nSendFlags : :: std :: os :: raw :: c_int) -> EResult);
reexport!(fn SteamAPI_ISteamNetworkingFakeUDPPort_ReceiveMessages(self_ : * mut ISteamNetworkingFakeUDPPort, ppOutMessages : * mut * mut SteamNetworkingMessage_t, nMaxMessages : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int);
reexport!(fn SteamAPI_ISteamNetworkingFakeUDPPort_ScheduleCleanup(self_ : * mut ISteamNetworkingFakeUDPPort, remoteAddress : * const SteamNetworkingIPAddr));
reexport!(fn SteamAPI_SteamIPAddress_t_IsSet(self_ : * mut SteamIPAddress_t) -> bool);
reexport!(fn SteamAPI_MatchMakingKeyValuePair_t_Construct(self_ : * mut MatchMakingKeyValuePair_t));
reexport!(fn SteamAPI_servernetadr_t_Construct(self_ : * mut servernetadr_t));
reexport!(fn SteamAPI_servernetadr_t_Init(self_ : * mut servernetadr_t, ip : :: std :: os :: raw :: c_uint, usQueryPort : uint16, usConnectionPort : uint16));
reexport!(fn SteamAPI_servernetadr_t_GetQueryPort(self_ : * mut servernetadr_t) -> uint16);
reexport!(fn SteamAPI_servernetadr_t_SetQueryPort(self_ : * mut servernetadr_t, usPort : uint16));
reexport!(fn SteamAPI_servernetadr_t_GetConnectionPort(self_ : * mut servernetadr_t) -> uint16);
reexport!(fn SteamAPI_servernetadr_t_SetConnectionPort(self_ : * mut servernetadr_t, usPort : uint16));
reexport!(fn SteamAPI_servernetadr_t_GetIP(self_ : * mut servernetadr_t) -> uint32);
reexport!(fn SteamAPI_servernetadr_t_SetIP(self_ : * mut servernetadr_t, unIP : uint32));
reexport!(fn SteamAPI_servernetadr_t_GetConnectionAddressString(self_ : * mut servernetadr_t) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_servernetadr_t_GetQueryAddressString(self_ : * mut servernetadr_t) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_servernetadr_t_IsLessThan(self_ : * mut servernetadr_t, netadr : * const servernetadr_t) -> bool);
reexport!(fn SteamAPI_servernetadr_t_Assign(self_ : * mut servernetadr_t, that : * const servernetadr_t));
reexport!(fn SteamAPI_gameserveritem_t_Construct(self_ : * mut gameserveritem_t));
reexport!(fn SteamAPI_gameserveritem_t_GetName(self_ : * mut gameserveritem_t) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_gameserveritem_t_SetName(self_ : * mut gameserveritem_t, pName : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_SteamNetworkingIPAddr_Clear(self_ : * mut SteamNetworkingIPAddr));
reexport!(fn SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros(self_ : * mut SteamNetworkingIPAddr) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIPAddr_SetIPv6(self_ : * mut SteamNetworkingIPAddr, ipv6 : * const uint8, nPort : uint16));
reexport!(fn SteamAPI_SteamNetworkingIPAddr_SetIPv4(self_ : * mut SteamNetworkingIPAddr, nIP : uint32, nPort : uint16));
reexport!(fn SteamAPI_SteamNetworkingIPAddr_IsIPv4(self_ : * mut SteamNetworkingIPAddr) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIPAddr_GetIPv4(self_ : * mut SteamNetworkingIPAddr) -> uint32);
reexport!(fn SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost(self_ : * mut SteamNetworkingIPAddr, nPort : uint16));
reexport!(fn SteamAPI_SteamNetworkingIPAddr_IsLocalHost(self_ : * mut SteamNetworkingIPAddr) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIPAddr_ToString(self_ : * mut SteamNetworkingIPAddr, buf : * mut :: std :: os :: raw :: c_char, cbBuf : uint32, bWithPort : bool));
reexport!(fn SteamAPI_SteamNetworkingIPAddr_ParseString(self_ : * mut SteamNetworkingIPAddr, pszStr : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIPAddr_IsEqualTo(self_ : * mut SteamNetworkingIPAddr, x : * const SteamNetworkingIPAddr) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIPAddr_GetFakeIPType(self_ : * mut SteamNetworkingIPAddr) -> ESteamNetworkingFakeIPType);
reexport!(fn SteamAPI_SteamNetworkingIPAddr_IsFakeIP(self_ : * mut SteamNetworkingIPAddr) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIdentity_Clear(self_ : * mut SteamNetworkingIdentity));
reexport!(fn SteamAPI_SteamNetworkingIdentity_IsInvalid(self_ : * mut SteamNetworkingIdentity) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIdentity_SetSteamID(self_ : * mut SteamNetworkingIdentity, steamID : uint64_steamid));
reexport!(fn SteamAPI_SteamNetworkingIdentity_GetSteamID(self_ : * mut SteamNetworkingIdentity) -> uint64_steamid);
reexport!(fn SteamAPI_SteamNetworkingIdentity_SetSteamID64(self_ : * mut SteamNetworkingIdentity, steamID : uint64));
reexport!(fn SteamAPI_SteamNetworkingIdentity_GetSteamID64(self_ : * mut SteamNetworkingIdentity) -> uint64);
reexport!(fn SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID(self_ : * mut SteamNetworkingIdentity, pszString : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID(self_ : * mut SteamNetworkingIdentity) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_SteamNetworkingIdentity_SetPSNID(self_ : * mut SteamNetworkingIdentity, id : uint64));
reexport!(fn SteamAPI_SteamNetworkingIdentity_GetPSNID(self_ : * mut SteamNetworkingIdentity) -> uint64);
reexport!(fn SteamAPI_SteamNetworkingIdentity_SetStadiaID(self_ : * mut SteamNetworkingIdentity, id : uint64));
reexport!(fn SteamAPI_SteamNetworkingIdentity_GetStadiaID(self_ : * mut SteamNetworkingIdentity) -> uint64);
reexport!(fn SteamAPI_SteamNetworkingIdentity_SetIPAddr(self_ : * mut SteamNetworkingIdentity, addr : * const SteamNetworkingIPAddr));
reexport!(fn SteamAPI_SteamNetworkingIdentity_GetIPAddr(self_ : * mut SteamNetworkingIdentity) -> * const SteamNetworkingIPAddr);
reexport!(fn SteamAPI_SteamNetworkingIdentity_SetIPv4Addr(self_ : * mut SteamNetworkingIdentity, nIPv4 : uint32, nPort : uint16));
reexport!(fn SteamAPI_SteamNetworkingIdentity_GetIPv4(self_ : * mut SteamNetworkingIdentity) -> uint32);
reexport!(fn SteamAPI_SteamNetworkingIdentity_GetFakeIPType(self_ : * mut SteamNetworkingIdentity) -> ESteamNetworkingFakeIPType);
reexport!(fn SteamAPI_SteamNetworkingIdentity_IsFakeIP(self_ : * mut SteamNetworkingIdentity) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIdentity_SetLocalHost(self_ : * mut SteamNetworkingIdentity));
reexport!(fn SteamAPI_SteamNetworkingIdentity_IsLocalHost(self_ : * mut SteamNetworkingIdentity) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIdentity_SetGenericString(self_ : * mut SteamNetworkingIdentity, pszString : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIdentity_GetGenericString(self_ : * mut SteamNetworkingIdentity) -> * const :: std :: os :: raw :: c_char);
reexport!(fn SteamAPI_SteamNetworkingIdentity_SetGenericBytes(self_ : * mut SteamNetworkingIdentity, data : * const :: std :: os :: raw :: c_void, cbLen : uint32) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIdentity_GetGenericBytes(self_ : * mut SteamNetworkingIdentity, cbLen : * mut :: std :: os :: raw :: c_int) -> * const uint8);
reexport!(fn SteamAPI_SteamNetworkingIdentity_IsEqualTo(self_ : * mut SteamNetworkingIdentity, x : * const SteamNetworkingIdentity) -> bool);
reexport!(fn SteamAPI_SteamNetworkingIdentity_ToString(self_ : * mut SteamNetworkingIdentity, buf : * mut :: std :: os :: raw :: c_char, cbBuf : uint32));
reexport!(fn SteamAPI_SteamNetworkingIdentity_ParseString(self_ : * mut SteamNetworkingIdentity, pszStr : * const :: std :: os :: raw :: c_char) -> bool);
reexport!(fn SteamAPI_SteamNetworkingMessage_t_Release(self_ : * mut SteamNetworkingMessage_t));
reexport!(fn SteamAPI_SteamNetworkingConfigValue_t_SetInt32(self_ : * mut SteamNetworkingConfigValue_t, eVal : ESteamNetworkingConfigValue, data : i32));
reexport!(fn SteamAPI_SteamNetworkingConfigValue_t_SetInt64(self_ : * mut SteamNetworkingConfigValue_t, eVal : ESteamNetworkingConfigValue, data : i64));
reexport!(fn SteamAPI_SteamNetworkingConfigValue_t_SetFloat(self_ : * mut SteamNetworkingConfigValue_t, eVal : ESteamNetworkingConfigValue, data : f32));
reexport!(fn SteamAPI_SteamNetworkingConfigValue_t_SetPtr(self_ : * mut SteamNetworkingConfigValue_t, eVal : ESteamNetworkingConfigValue, data : * mut :: std :: os :: raw :: c_void));
reexport!(fn SteamAPI_SteamNetworkingConfigValue_t_SetString(self_ : * mut SteamNetworkingConfigValue_t, eVal : ESteamNetworkingConfigValue, data : * const :: std :: os :: raw :: c_char));
reexport!(fn SteamAPI_SteamDatagramHostedAddress_Clear(self_ : * mut SteamDatagramHostedAddress));
reexport!(fn SteamAPI_SteamDatagramHostedAddress_GetPopID(self_ : * mut SteamDatagramHostedAddress) -> SteamNetworkingPOPID);
reexport!(fn SteamAPI_SteamDatagramHostedAddress_SetDevAddress(self_ : * mut SteamDatagramHostedAddress, nIP : uint32, nPort : uint16, popid : SteamNetworkingPOPID));
reexport!(fn SteamGameServer_Shutdown());
reexport!(fn SteamGameServer_BSecure() -> bool);
reexport!(fn SteamGameServer_GetSteamID() -> uint64);
reexport!(fn SteamInternal_GameServer_Init(unIP : uint32, usLegacySteamPort : uint16, usGamePort : uint16, usQueryPort : uint16, eServerMode : EServerMode, pchVersionString : * const :: std :: os :: raw :: c_char) -> bool);
